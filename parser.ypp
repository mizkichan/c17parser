%code {
/* Unqualified "%code" block which will be emitted into .cpp */
static auto add_typedef_names(ptree const&) -> void;

class add_nodes {
  ptree& target;
public:
  add_nodes(ptree &);
  auto operator()(std::string const&, ptree&&) -> add_nodes&;
  auto operator()(std::string const&, std::string const&) -> add_nodes&;
};
}

%code requires {
/* "%code requires" block for dependency codes of YYSTYPE and YYLTYPE */
#include <boost/property_tree/ptree.hpp>
using ptree = boost::property_tree::ptree;
}

%code provides {
/* "%code provides" block for declarations in other object files */
#include "lexer.hpp"
}

%define api.value.automove
%define api.value.type variant
%define parse.assert
%define parse.error verbose
%define parse.trace
%language "c++"
%locations
%parse-param {ptree& result}
%require "3.2"

%printer { yyo << $$; } <std::string>
%printer { yyo << $$.template get_value<std::string>(); } <ptree>

%token ALIGNAS "_Alignas"
%token ALIGNOF "_Alignof"
%token ATOMIC "_Atomic"
%token AUTO "auto"
%token BOOL "_Bool"
%token BREAK "break"
%token CASE "case"
%token CHAR "char"
%token COMPLEX "_Complex"
%token CONST "const"
%token CONTINUE "continue"
%token DEFAULT "default"
%token DO "do"
%token DOUBLE "double"
%token ELSE "else"
%token ENUM "enum"
%token EXTERN "extern"
%token FLOAT "float"
%token FOR "for"
%token GENERIC "_Generic"
%token GOTO "goto"
%token IF "if"
%token IMAGINARY "_Imaginary"
%token INLINE "inline"
%token INT "int"
%token LONG "long"
%token NORETURN "_Noreturn"
%token REGISTER "register"
%token RESTRICT "restrict"
%token RETURN "return"
%token SHORT "short"
%token SIGNED "signed"
%token SIZEOF "sizeof"
%token STATIC "static"
%token STATIC_ASSERT "_Static_assert"
%token STRUCT "struct"
%token SWITCH "switch"
%token THREAD_LOCAL "_Thread_local"
%token TYPEDEF "typedef"
%token UNION "union"
%token UNSIGNED "unsigned"
%token VOID "void"
%token VOLATILE "volatile"
%token WHILE "while"

%token AMP "&"
%token AMP_AMP "&&"
%token AMP_EQ "&="
%token AST "*"
%token AST_EQ "*="
%token COLON ":"
%token COMMA ","
%token EQ "="
%token EQ_EQ "=="
%token EXCL "!"
%token EXCL_EQ "!="
%token GT ">"
%token GT_EQ ">="
%token HAT "^"
%token HAT_EQ "^="
%token HELLIP "..."
%token LAQUO "<<"
%token LAQUO_EQ "<<="
%token LCUB "{"
%token LPAR "("
%token LSQB "["
%token LT "<"
%token LT_EQ "<="
%token MINUS "-"
%token MINUS_EQ "-="
%token MINUS_MINUS "--"
%token PERCNT "%"
%token PERCNT_EQ "%="
%token PERIOD "."
%token PLUS "+"
%token PLUS_EQ "+="
%token PLUS_PLUS "++"
%token QUEST "?"
%token RAQUO ">>"
%token RAQUO_EQ ">>="
%token RARR "->"
%token RCUB "}"
%token RPAR ")"
%token RSQB "]"
%token SEMI ";"
%token SOL "/"
%token SOL_EQ "/="
%token TILDE "~"
%token VERT "|"
%token VERT_EQ "|="
%token VERT_VERT "||"

%token <std::string> IDENTIFIER TYPEDEF_NAME INTEGER_CONSTANT FLOATING_CONSTANT ENUMERATION_CONSTANT CHARACTER_CONSTANT STRING_LITERAL
%token END_OF_FILE 0

%type <ptree> constant enumeration-constant primary-expression generic-selection generic-assoc-list generic-association postfix-expression argument-expression-list unary-expression unary-operator cast-expression multiplicative-expression additive-expression shift-expression relational-expression equality-expression AND-expression exclusive-OR-expression inclusive-OR-expression logical-AND-expression logical-OR-expression conditional-expression assignment-expression assignment-operator expression constant-expression declaration declaration-specifiers init-declarator-list init-declarator storage-class-specifier type-specifier struct-or-union-specifier struct-or-union struct-declaration-list struct-declaration specifier-qualifier-list struct-declarator-list struct-declarator enum-specifier enumerator-list enumerator atomic-type-specifier type-qualifier function-specifier alignment-specifier declarator direct-declarator pointer type-qualifier-list parameter-type-list parameter-list parameter-declaration identifier-list type-name abstract-declarator direct-abstract-declarator initializer initializer-list designation designation-list designator static-assert-declaration statement labeled-statement compound-statement block-item-list block-item expression-statement selection-statement iteration-statement jump-statement translation-unit external-declaration function-definition declaration-list

%start translation-unit

%%

constant
: INTEGER_CONSTANT
  { add_nodes($$)("integer-constant", $1); }
| FLOATING_CONSTANT
  { add_nodes($$)("floating-constant", $1); }
| ENUMERATION_CONSTANT
  { add_nodes($$)("enumeration-constant", $1); }
| CHARACTER_CONSTANT
  { add_nodes($$)("character-constant", $1); }
;

enumeration-constant
: IDENTIFIER
  { auto&& _1 = $1;
    add_nodes($$)("identifier", _1);
    // Do the lexer hack
    add_enumeration_constant(std::move(_1)); }
;

primary-expression
: IDENTIFIER
  { add_nodes($$)("identifier", $1); }
| constant
  { add_nodes($$)("constant", $1); }
| STRING_LITERAL
  { add_nodes($$)("string-literal", $1); }
| LPAR expression RPAR
  { add_nodes($$)("punctuator", "(")("expression", $2)("punctuator", ")"); }
| generic-selection
  { add_nodes($$)("generic-selection", $1); }
;

generic-selection
: GENERIC LPAR assignment-expression COMMA generic-assoc-list RPAR
  { add_nodes($$)("keyword", "_Generic")("punctuator", "(")("assignment-expression", $3)("punctuator", ",")("generic-assoc-list", $5)("punctuator", ")"); }
;

generic-assoc-list
: generic-association
  { add_nodes($$)("generic-association", $1); }
| generic-assoc-list COMMA generic-association
  { add_nodes($$)("generic-assoc-list", $1)("punctuator", ",")("generic-association", $3); }
;

generic-association
: type-name COLON assignment-expression
  { add_nodes($$)("type-name", $1)("punctuator", ":")("assignment-expression", $3); }
| DEFAULT COLON assignment-expression
  { add_nodes($$)("keyword", "default")("punctuator", ":")("assignment-expression", $3); }
;

postfix-expression
: primary-expression
  { add_nodes($$)("primary-expression", $1); }
| postfix-expression LSQB expression RSQB
  { add_nodes($$)("postfix-expression", $1)("punctuator", "[")("expression", $3)("punctuator", "]"); }
| postfix-expression LPAR RPAR
  { add_nodes($$)("postfix-expression", $1)("punctuator", "(")("punctuator", ")"); }
| postfix-expression LPAR argument-expression-list RPAR
  { add_nodes($$)("postfix-expression", $1)("punctuator", "(")("argument-expression-list", $3)("punctuator", ")"); }
| postfix-expression PERIOD IDENTIFIER
  { add_nodes($$)("postfix-expression", $1)("punctuator", ".")("identifier", $3); }
| postfix-expression RARR IDENTIFIER
  { add_nodes($$)("postfix-expression", $1)("punctuator", "->")("identifier", $3); }
| postfix-expression PLUS_PLUS
  { add_nodes($$)("postfix-expression", $1)("punctuator", "++"); }
| postfix-expression MINUS_MINUS
  { add_nodes($$)("postfix-expression", $1)("punctuator", "--"); }
| LPAR type-name RPAR LCUB initializer-list RCUB
  { add_nodes($$)("punctuator", "(")("type-name", $2)("punctuator", ")")("punctuator", "{")("initializer-list", $5)("punctuator", "}"); }
| LPAR type-name RPAR LCUB initializer-list COMMA RCUB
  { add_nodes($$)("punctuator", "(")("type-name", $2)("punctuator", ")")("punctuator", "{")("initializer-list", $5)("punctuator", ",")("punctuator", "}"); }
;

argument-expression-list
: assignment-expression
  { add_nodes($$)("assignment-expression", $1); }
| argument-expression-list COMMA assignment-expression
  { add_nodes($$)("argument-expression-list", $1)("punctuator", ",")("assignment-expression", $3); }
;

unary-expression
: postfix-expression
  { add_nodes($$)("postfix-expression", $1); }
| PLUS_PLUS unary-expression
  { add_nodes($$)("punctuator", "++")("unary-expression", $2); }
| MINUS_MINUS unary-expression
  { add_nodes($$)("punctuator", "--")("unary-expression", $2); }
| unary-operator cast-expression
  { add_nodes($$)("unary-operator", $1)("cast-expression", $2); }
| SIZEOF unary-expression
  { add_nodes($$)("keyword", "sizeof")("unary-expression", $2); }
| SIZEOF LPAR type-name RPAR
  { add_nodes($$)("keyword", "sizeof")("punctuator", "(")("type-name", $3)("punctuator", ")"); }
| ALIGNOF LPAR type-name RPAR
  { add_nodes($$)("keyword", "_Alignof")("punctuator", "(")("type-name", $3)("punctuator", ")"); }
;

unary-operator
: AMP
  { add_nodes($$)("punctuator", "&"); }
| AST
  { add_nodes($$)("punctuator", "*"); }
| PLUS
  { add_nodes($$)("punctuator", "+"); }
| MINUS
  { add_nodes($$)("punctuator", "-"); }
| TILDE
  { add_nodes($$)("punctuator", "~"); }
| EXCL
  { add_nodes($$)("punctuator", "!"); }
;

cast-expression
: unary-expression
  { add_nodes($$)("unary-expression", $1); }
| LPAR type-name RPAR cast-expression
  { add_nodes($$)("punctuator", "(")("type-name", $2)("punctuator", ")")("cast-expression", $4); }
;

multiplicative-expression
: cast-expression
  { add_nodes($$)("cast-expression", $1); }
| multiplicative-expression AST cast-expression
  { add_nodes($$)("multiplicative-expression", $1)("punctuator", "*")("cast-expression", $3); }
| multiplicative-expression SOL cast-expression
  { add_nodes($$)("multiplicative-expression", $1)("punctuator", "/")("cast-expression", $3); }
| multiplicative-expression PERCNT cast-expression
  { add_nodes($$)("multiplicative-expression", $1)("punctuator", "%")("cast-expression", $3); }
;

additive-expression
: multiplicative-expression
  { add_nodes($$)("multiplicative-expression", $1); }
| additive-expression PLUS multiplicative-expression
  { add_nodes($$)("additive-expression", $1)("punctuator", "+")("multiplicative-expression", $3); }
| additive-expression MINUS multiplicative-expression
  { add_nodes($$)("additive-expression", $1)("punctuator", "-")("multiplicative-expression", $3); }
;

shift-expression
: additive-expression
  { add_nodes($$)("additive-expression", $1); }
| shift-expression LAQUO additive-expression
  { add_nodes($$)("shift-expression", $1)("punctuator", "<<")("additive-expression", $3); }
| shift-expression RAQUO additive-expression
  { add_nodes($$)("shift-expression", $1)("punctuator", ">>")("additive-expression", $3); }
;

relational-expression
: shift-expression
  { add_nodes($$)("shift-expression", $1); }
| relational-expression LT shift-expression
  { add_nodes($$)("relational-expression", $1)("punctuator", "<")("shift-expression", $3); }
| relational-expression GT shift-expression
  { add_nodes($$)("relational-expression", $1)("punctuator", ">")("shift-expression", $3); }
| relational-expression LT_EQ shift-expression
  { add_nodes($$)("relational-expression", $1)("punctuator", "<=")("shift-expression", $3); }
| relational-expression GT_EQ shift-expression
  { add_nodes($$)("relational-expression", $1)("punctuator", ">=")("shift-expression", $3); }
;

equality-expression
: relational-expression
  { add_nodes($$)("relational-expression", $1); }
| equality-expression EQ_EQ relational-expression
  { add_nodes($$)("equality-expression", $1)("punctuator", "==")("relational-expression", $3); }
| equality-expression EXCL_EQ relational-expression
  { add_nodes($$)("equality-expression", $1)("punctuator", "!=")("relational-expression", $3); }
;

AND-expression
: equality-expression
  { add_nodes($$)("equality-expression", $1); }
| AND-expression AMP equality-expression
  { add_nodes($$)("AND-expression", $1)("punctuator", "&")("equality-expression", $3); }
;

exclusive-OR-expression
: AND-expression
  { add_nodes($$)("AND-expression", $1); }
| exclusive-OR-expression HAT AND-expression
  { add_nodes($$)("exclusive-OR-expression", $1)("punctuator", "^")("AND-expression", $3); }
;

inclusive-OR-expression
: exclusive-OR-expression
  { add_nodes($$)("exclusive-OR-expression", $1); }
| inclusive-OR-expression VERT exclusive-OR-expression
  { add_nodes($$)("inclusive-OR-expression", $1)("punctuator", "|")("exclusive-OR-expression", $3); }
;

logical-AND-expression
: inclusive-OR-expression
  { add_nodes($$)("inclusive-OR-expression", $1); }
| logical-AND-expression AMP_AMP inclusive-OR-expression
  { add_nodes($$)("logical-AND-expression", $1)("punctuator", "&&")("inclusive-OR-expression", $3); }
;

logical-OR-expression
: logical-AND-expression
  { add_nodes($$)("logical-AND-expression", $1); }
| logical-OR-expression VERT_VERT logical-AND-expression
  { add_nodes($$)("logical-OR-expression", $1)("punctuator", "||")("logical-AND-expression", $3); }
;

conditional-expression
: logical-OR-expression
  { add_nodes($$)("logical-OR-expression", $1); }
| logical-OR-expression QUEST expression COLON conditional-expression
  { add_nodes($$)("logical-OR-expression", $1)("punctuator", "?")("expression", $3)("punctuator", ":")("conditional-expression", $5); }
;

assignment-expression
: conditional-expression
  { add_nodes($$)("conditional-expression", $1); }
| unary-expression assignment-operator assignment-expression
  { add_nodes($$)("unary-expression", $1)("assignment-operator", $2)("assignment-expression", $3); }
;

assignment-operator
: EQ
  { add_nodes($$)("punctuator", "="); }
| AST_EQ
  { add_nodes($$)("punctuator", "*="); }
| SOL_EQ
  { add_nodes($$)("punctuator", "/="); }
| PERCNT_EQ
  { add_nodes($$)("punctuator", "%="); }
| PLUS_EQ
  { add_nodes($$)("punctuator", "+="); }
| MINUS_EQ
  { add_nodes($$)("punctuator", "-="); }
| LAQUO_EQ
  { add_nodes($$)("punctuator", "<<="); }
| RAQUO_EQ
  { add_nodes($$)("punctuator", ">>="); }
| AMP_EQ
  { add_nodes($$)("punctuator", "&="); }
| HAT_EQ
  { add_nodes($$)("punctuator", "^="); }
| VERT_EQ
  { add_nodes($$)("punctuator", "|="); }
;

expression
: assignment-expression
  { add_nodes($$)("assignment-expression", $1); }
| expression COMMA assignment-expression
  { add_nodes($$)("expression", $1)("punctuator", ",")("assignment-expression", $3); }
;

constant-expression
: conditional-expression
  { add_nodes($$)("conditional-expression", $1); }
;

declaration
: declaration-specifiers SEMI
  { add_nodes($$)("declaration-specifiers", $1)("punctuator", ";"); }
| declaration-specifiers init-declarator-list SEMI
  {
    auto&& _1 = $1; auto&& _2 = $2;
    // Do the lexer hack
    if (auto const keyword = _1.get_optional<std::string>("storage-class-specifier.keyword") ) if (*keyword == "typedef") {
      add_typedef_names(_2);
    }
    add_nodes($$)("declaration-specifiers", std::move(_1))("init-declarator-list", std::move(_2))("punctuator", ";");
  }
| static-assert-declaration
  { add_nodes($$)("static-assert-declaration", $1); }
;

declaration-specifiers
: storage-class-specifier
  { add_nodes($$)("storage-class-specifier", $1); }
| storage-class-specifier declaration-specifiers
  { add_nodes($$)("storage-class-specifier", $1)("declaration-specifiers", $2); }
| type-specifier
  { add_nodes($$)("type-specifier", $1); }
| type-specifier declaration-specifiers
  { add_nodes($$)("type-specifier", $1)("declaration-specifiers", $2); }
| type-qualifier
  { add_nodes($$)("type-qualifier", $1); }
| type-qualifier declaration-specifiers
  { add_nodes($$)("type-qualifier", $1)("declaration-specifiers", $2); }
| function-specifier
  { add_nodes($$)("function-specifier", $1); }
| function-specifier declaration-specifiers
  { add_nodes($$)("function-specifier", $1)("declaration-specifiers", $2); }
| alignment-specifier
  { add_nodes($$)("alignment-specifier", $1); }
| alignment-specifier declaration-specifiers
  { add_nodes($$)("alignment-specifier", $1)("declaration-specifiers", $2); }
;

init-declarator-list
: init-declarator
  { add_nodes($$)("init-declarator", $1); }
| init-declarator-list COMMA init-declarator
  { add_nodes($$)("init-declarator-list", $1)("punctuator", ",")("init-declarator", $3); }
;

init-declarator
: declarator
  { add_nodes($$)("declarator", $1); }
| declarator EQ initializer
  { add_nodes($$)("declarator", $1)("punctuator", "=")("initializer", $3); }
;

storage-class-specifier
: TYPEDEF
  { add_nodes($$)("keyword", "typedef"); }
| EXTERN
  { add_nodes($$)("keyword", "extern"); }
| STATIC
  { add_nodes($$)("keyword", "static"); }
| THREAD_LOCAL
  { add_nodes($$)("keyword", "_Thread_local"); }
| AUTO
  { add_nodes($$)("keyword", "auto"); }
| REGISTER
  { add_nodes($$)("keyword", "register"); }
;

type-specifier
: VOID
  { add_nodes($$)("keyword", "void"); }
| CHAR
  { add_nodes($$)("keyword", "char"); }
| SHORT
  { add_nodes($$)("keyword", "short"); }
| INT
  { add_nodes($$)("keyword", "int"); }
| LONG
  { add_nodes($$)("keyword", "long"); }
| FLOAT
  { add_nodes($$)("keyword", "float"); }
| DOUBLE
  { add_nodes($$)("keyword", "double"); }
| SIGNED
  { add_nodes($$)("keyword", "signed"); }
| UNSIGNED
  { add_nodes($$)("keyword", "unsigned"); }
| BOOL
  { add_nodes($$)("keyword", "_Bool"); }
| COMPLEX
  { add_nodes($$)("keyword", "_Complex"); }
| atomic-type-specifier
  { add_nodes($$)("atomic-type-specifier", $1); }
| struct-or-union-specifier
  { add_nodes($$)("struct-or-union-specifier", $1); }
| enum-specifier
  { add_nodes($$)("enum-specifier", $1); }
| TYPEDEF_NAME
  { add_nodes($$)("typedef-name", $1); }
;

struct-or-union-specifier
: struct-or-union LCUB struct-declaration-list RCUB
  { add_nodes($$)("struct-or-union", $1)("punctuator", "{")("struct-declaration-list", $3)("punctuator", "}"); }
| struct-or-union IDENTIFIER LCUB struct-declaration-list RCUB
  { add_nodes($$)("struct-or-union", $1)("identifier", $2)("punctuator", "{")("struct-declaration-list", $4)("punctuator", "}"); }
| struct-or-union IDENTIFIER
  { add_nodes($$)("struct-or-union", $1)("identifier", $2); }
;

struct-or-union
: STRUCT
  { add_nodes($$)("keyword", "struct"); }
| UNION
  { add_nodes($$)("keyword", "union"); }
;

struct-declaration-list
: struct-declaration
  { add_nodes($$)("struct-declaration", $1); }
| struct-declaration-list struct-declaration
  { add_nodes($$)("struct-declaration-list", $1)("struct-declaration", $2); }
;

struct-declaration
: specifier-qualifier-list SEMI
  { add_nodes($$)("specifier-qualifier-list", $1)("punctuator", ";"); }
| specifier-qualifier-list struct-declarator-list SEMI
  { add_nodes($$)("specifier-qualifier-list", $1)("struct-declarator-list", $2)("punctuator", ";"); }
| static-assert-declaration
  { add_nodes($$)("static-assert-declaration", $1); }
;

specifier-qualifier-list
: type-specifier
  { add_nodes($$)("type-specifier", $1); }
| type-specifier specifier-qualifier-list
  { add_nodes($$)("type-specifier", $1)("specifier-qualifier-list", $2); }
| type-qualifier
  { add_nodes($$)("type-qualifier", $1); }
| type-qualifier specifier-qualifier-list
  { add_nodes($$)("type-qualifier", $1)("specifier-qualifier-list", $2); }
| alignment-specifier
  { add_nodes($$)("alignment-specifier", $1); }
| alignment-specifier specifier-qualifier-list
  { add_nodes($$)("alignment-specifier", $1)("specifier-qualifier-list", $2); }
;

struct-declarator-list
: struct-declarator
  { add_nodes($$)("struct-declarator", $1); }
| struct-declarator-list COMMA struct-declarator
  { add_nodes($$)("struct-declarator-list", $1)("punctuator", ",")("struct-declarator", $3); }
;

struct-declarator
: declarator
  { add_nodes($$)("declarator", $1); }
| COLON constant-expression
  { add_nodes($$)("punctuator", ":")("constant-expression", $2); }
| declarator COLON constant-expression
  { add_nodes($$)("declarator", $1)("punctuator", ":")("constant-expression", $3); }
;

enum-specifier
: ENUM LCUB enumerator-list RCUB
  { add_nodes($$)("keyword", "enum")("punctuator", "{")("enumerator-list", $3)("punctuator", "}"); }
| ENUM IDENTIFIER LCUB enumerator-list RCUB
  { add_nodes($$)("keyword", "enum")("identifier", $2)("punctuator", "{")("enumerator-list", $4)("punctuator", "}"); }
| ENUM LCUB enumerator-list COMMA RCUB
  { add_nodes($$)("keyword", "enum")("punctuator", "{")("enumerator-list", $3)("punctuator", ",")("punctuator", "}"); }
| ENUM IDENTIFIER LCUB enumerator-list COMMA RCUB
  { add_nodes($$)("keyword", "enum")("identifier", $2)("punctuator", "{")("enumerator-list", $4)("punctuator", ",")("punctuator", "}"); }
| ENUM IDENTIFIER
  { add_nodes($$)("keyword", "enum")("identifier", $2); }
;

enumerator-list
: enumerator
  { add_nodes($$)("enumerator", $1); }
| enumerator-list COMMA enumerator
  { add_nodes($$)("enumerator-list", $1)("punctuator", ",")("enumerator", $3); }
;

enumerator
: enumeration-constant
  { add_nodes($$)("enumeration-constant", $1); }
| enumeration-constant EQ constant-expression
  { add_nodes($$)("enumeration-constant", $1)("punctuator", "=")("constant-expression", $3); }
;

/* NOTE: following two rules make grammar ambiguous.
 * See https://stackoverflow.com/questions/10668941/c11-grammar-ambiguity-between-atomic-type-specifier-and-qualifier
 */

atomic-type-specifier
: ATOMIC LPAR type-name RPAR
  { add_nodes($$)("keyword", "_Atomic")("punctuator", "(")("type-name", $3)("punctuator", ")"); }
;

type-qualifier
: CONST
  { add_nodes($$)("keyword", "const"); }
| RESTRICT
  { add_nodes($$)("keyword", "restrict"); }
| VOLATILE
  { add_nodes($$)("keyword", "volatile"); }
| ATOMIC
  { add_nodes($$)("keyword", "_Atomic"); }
;

function-specifier
: INLINE
  { add_nodes($$)("keyword", "inline"); }
| NORETURN
  { add_nodes($$)("keyword", "_Noreturn"); }
;

alignment-specifier
: ALIGNAS LPAR type-name RPAR
  { add_nodes($$)("keyword", "_Alignas")("punctuator", "(")("type-name", $3)("punctuator", ")"); }
| ALIGNAS LPAR constant-expression RPAR
  { add_nodes($$)("keyword", "_Alignas")("punctuator", "(")("constant-expression", $3)("punctuator", ")"); }
;

declarator
: direct-declarator
  { add_nodes($$)("direct-declarator", $1); }
| pointer direct-declarator
  { add_nodes($$)("pointer", $1)("direct-declarator", $2); }
;

direct-declarator
: IDENTIFIER
  { add_nodes($$)("identifier", $1); }
| LPAR declarator RPAR
  { add_nodes($$)("punctuator", "(")("declarator", $2)("punctuator", ")"); }
| direct-declarator LSQB RSQB
  { add_nodes($$)("direct-declarator", $1)("punctuator", "[")("punctuator", "]"); }
| direct-declarator LSQB type-qualifier-list RSQB
  { add_nodes($$)("direct-declarator", $1)("punctuator", "[")("type-qualifier-list", $3)("punctuator", "]"); }
| direct-declarator LSQB assignment-expression RSQB
  { add_nodes($$)("direct-declarator", $1)("punctuator", "[")("assignment-expression", $3)("punctuator", "]"); }
| direct-declarator LSQB type-qualifier-list assignment-expression RSQB
  { add_nodes($$)("direct-declarator", $1)("punctuator", "[")("type-qualifier-list", $3)("assignment-expression", $4)("punctuator", "]"); }
| direct-declarator LSQB STATIC assignment-expression RSQB
  { add_nodes($$)("direct-declarator", $1)("punctuator", "[")("keyword", "static")("assignment-expression", $4)("punctuator", "]"); }
| direct-declarator LSQB STATIC type-qualifier-list assignment-expression RSQB
  { add_nodes($$)("direct-declarator", $1)("punctuator", "[")("keyword", "static")("type-qualifier-list", $4)("assignment-expression", $5)("punctuator", "]"); }
| direct-declarator LSQB type-qualifier-list STATIC assignment-expression RSQB
  { add_nodes($$)("direct-declarator", $1)("punctuator", "[")("type-qualifier-list", $3)("keyword", "static")("assignment-expression", $5)("punctuator", "]"); }
| direct-declarator LSQB AST RSQB
  { add_nodes($$)("direct-declarator", $1)("punctuator", "[")("punctuator", "*")("punctuator", "]"); }
| direct-declarator LSQB type-qualifier-list AST RSQB
  { add_nodes($$)("direct-declarator", $1)("punctuator", "[")("type-qualifier-list", $3)("punctuator", "*")("punctuator", "]"); }
| direct-declarator LPAR parameter-type-list RPAR
  { add_nodes($$)("direct-declarator", $1)("punctuator", "(")("parameter-type-list", $3)("punctuator", ")"); }
| direct-declarator LPAR RPAR
  { add_nodes($$)("direct-declarator", $1)("punctuator", "(")("punctuator", ")"); }
| direct-declarator LPAR identifier-list RPAR
  { add_nodes($$)("direct-declarator", $1)("punctuator", "(")("identifier-list", $3)("punctuator", ")"); }
;

pointer
: AST
  { add_nodes($$)("punctuator", "*"); }
| AST type-qualifier-list
  { add_nodes($$)("punctuator", "*")("type-qualifier-list", $2); }
| AST pointer
  { add_nodes($$)("punctuator", "*")("pointer", $2); }
| AST type-qualifier-list pointer
  { add_nodes($$)("punctuator", "*")("type-qualifier-list", $2)("pointer", $3); }
;

type-qualifier-list
: type-qualifier
  { add_nodes($$)("type-qualifier", $1); }
| type-qualifier-list type-qualifier
  { add_nodes($$)("type-qualifier-list", $1)("type-qualifier", $2); }
;

parameter-type-list
: parameter-list
  { add_nodes($$)("parameter-list", $1); }
| parameter-list COMMA HELLIP
  { add_nodes($$)("parameter-list", $1)("punctuator", ",")("punctuator", "..."); }
;

parameter-list
: parameter-declaration
  { add_nodes($$)("parameter-declaration", $1); }
| parameter-list COMMA parameter-declaration
  { add_nodes($$)("parameter-list", $1)("punctuator", ",")("parameter-declaration", $3); }
;

parameter-declaration
: declaration-specifiers declarator
  { add_nodes($$)("declaration-specifiers", $1)("declarator", $2); }
| declaration-specifiers
  { add_nodes($$)("declaration-specifiers", $1); }
| declaration-specifiers abstract-declarator
  { add_nodes($$)("declaration-specifiers", $1)("abstract-declarator", $2); }
;

identifier-list
: IDENTIFIER
  { add_nodes($$)("identifier", $1); }
| identifier-list COMMA IDENTIFIER
  { add_nodes($$)("identifier-list", $1)("punctuator", ",")("identifier", $3); }
;

type-name
: specifier-qualifier-list
  { add_nodes($$)("specifier-qualifier-list", $1); }
| specifier-qualifier-list abstract-declarator
  { add_nodes($$)("specifier-qualifier-list", $1)("abstract-declarator", $2); }
;

abstract-declarator
: pointer
  { add_nodes($$)("pointer", $1); }
| direct-abstract-declarator
  { add_nodes($$)("direct-abstract-declarator", $1); }
| pointer direct-abstract-declarator
  { add_nodes($$)("pointer", $1)("direct-abstract-declarator", $2); }
;

direct-abstract-declarator
: LPAR abstract-declarator RPAR
  { add_nodes($$)("punctuator", "(")("abstract-declarator", $2)("punctuator", ")"); }
| LSQB RSQB
  { add_nodes($$)("punctuator", "[")("punctuator", "]"); }
| direct-abstract-declarator LSQB RSQB
  { add_nodes($$)("direct-abstract-declarator", $1)("punctuator", "[")("punctuator", "]"); }
| LSQB type-qualifier-list RSQB
  { add_nodes($$)("punctuator", "[")("type-qualifier-list", $2)("punctuator", "]"); }
| direct-abstract-declarator LSQB type-qualifier-list RSQB
  { add_nodes($$)("direct-abstract-declarator", $1)("punctuator", "[")("type-qualifier-list", $3)("punctuator", "]"); }
| LSQB assignment-expression RSQB
  { add_nodes($$)("punctuator", "[")("assignment-expression", $2)("punctuator", "]"); }
| direct-abstract-declarator LSQB assignment-expression RSQB
  { add_nodes($$)("direct-abstract-declarator", $1)("punctuator", "[")("assignment-expression", $3)("punctuator", "]"); }
| LSQB type-qualifier-list assignment-expression RSQB
  { add_nodes($$)("punctuator", "[")("type-qualifier-list", $2)("assignment-expression", $3)("punctuator", "]"); }
| direct-abstract-declarator LSQB type-qualifier-list assignment-expression RSQB
  { add_nodes($$)("direct-abstract-declarator", $1)("punctuator", "[")("type-qualifier-list", $3)("assignment-expression", $4)("punctuator", "]"); }
| LSQB STATIC assignment-expression RSQB
  { add_nodes($$)("punctuator", "[")("keyword", "static")("assignment-expression", $3)("punctuator", "]"); }
| direct-abstract-declarator LSQB STATIC assignment-expression RSQB
  { add_nodes($$)("direct-abstract-declarator", $1)("punctuator", "[")("keyword", "static")("assignment-expression", $4)("punctuator", "]"); }
| LSQB STATIC type-qualifier-list assignment-expression RSQB
  { add_nodes($$)("punctuator", "[")("keyword", "static")("type-qualifier-list", $3)("assignment-expression", $4)("punctuator", "]"); }
| direct-abstract-declarator LSQB STATIC type-qualifier-list assignment-expression RSQB
  { add_nodes($$)("direct-abstract-declarator", $1)("punctuator", "[")("keyword", "static")("type-qualifier-list", $4)("assignment-expression", $5)("punctuator", "]"); }
| LSQB type-qualifier-list STATIC assignment-expression RSQB
  { add_nodes($$)("punctuator", "[")("type-qualifier-list", $2)("keyword", "static")("assignment-expression", $4)("punctuator", "]"); }
| direct-abstract-declarator LSQB type-qualifier-list STATIC assignment-expression RSQB
  { add_nodes($$)("direct-abstract-declarator", $1)("punctuator", "[")("type-qualifier-list", $3)("keyword", "static")("assignment-expression", $5)("punctuator", "]"); }
| LSQB AST RSQB
  { add_nodes($$)("punctuator", "[")("punctuator", "*")("punctuator", "]"); }
| direct-abstract-declarator LSQB AST RSQB
  { add_nodes($$)("direct-abstract-declarator", $1)("punctuator", "[")("punctuator", "*")("punctuator", "]"); }
| LPAR RPAR
  { add_nodes($$)("punctuator", "(")("punctuator", ")"); }
| direct-abstract-declarator LPAR RPAR
  { add_nodes($$)("direct-abstract-declarator", $1)("punctuator", "(")("punctuator", ")"); }
| LPAR parameter-type-list RPAR
  { add_nodes($$)("punctuator", "(")("parameter-type-list", $2)("punctuator", ")"); }
| direct-abstract-declarator LPAR parameter-type-list RPAR
  { add_nodes($$)("direct-abstract-declarator", $1)("punctuator", "(")("parameter-type-list", $3)("punctuator", ")"); }
;

initializer
: assignment-expression
  { add_nodes($$)("assignment-expression", $1); }
| LCUB initializer-list RCUB
  { add_nodes($$)("punctuator", "{")("initializer-list", $2)("punctuator", "}"); }
| LCUB identifier-list COMMA RCUB
  { add_nodes($$)("punctuator", "{")("identifier-list", $2)("punctuator", ",")("punctuator", "}"); }
;

initializer-list
: initializer
  { add_nodes($$)("initializer", $1); }
| designation initializer
  { add_nodes($$)("designation", $1)("initializer", $2); }
| initializer-list COMMA initializer
  { add_nodes($$)("initializer-list", $1)("punctuator", ",")("initializer", $3); }
| initializer-list COMMA designation initializer
  { add_nodes($$)("initializer-list", $1)("punctuator", ",")("designation", $3)("initializer", $4); }
;

designation
: designation-list EQ
  { add_nodes($$)("designation-list", $1)("punctuator", "="); }
;

designation-list
: designator
  { add_nodes($$)("designator", $1); }
| designation-list designator
  { add_nodes($$)("designation-list", $1)("designator", $2); }
;

designator
: LSQB constant-expression RSQB
  { add_nodes($$)("punctuator", "[")("constant-expression", $2)("punctuator", "]"); }
| PERIOD IDENTIFIER
  { add_nodes($$)("punctuator", ".")("identifier", $2); }
;

static-assert-declaration
: STATIC_ASSERT LPAR constant-expression COMMA STRING_LITERAL RPAR SEMI
  { add_nodes($$)("keyword", "_Static_assert")("punctuator", "(")("constant-expression", $3)("punctuator", ",")("string-literal", $5)("punctuator", ")")("punctuator", ";"); }
;

statement
: labeled-statement
  { add_nodes($$)("labeled-statement", $1); }
| compound-statement
  { add_nodes($$)("compound-statement", $1); }
| expression-statement
  { add_nodes($$)("expression-statement", $1); }
| selection-statement
  { add_nodes($$)("selection-statement", $1); }
| iteration-statement
  { add_nodes($$)("iteration-statement", $1); }
| jump-statement
  { add_nodes($$)("jump-statement", $1); }
;

labeled-statement
: IDENTIFIER COLON statement
  { add_nodes($$)("identifier", $1)("punctuator", ":")("statement", $3); }
| CASE constant-expression COLON statement
  { add_nodes($$)("keyword", "case")("constant-expression", $2)("punctuator", ":")("statement", $4); }
| DEFAULT COLON statement
  { add_nodes($$)("keyword", "default")("punctuator", ":")("statement", $3); }
;

compound-statement
: LCUB RCUB
  { add_nodes($$)("punctuator", "{")("punctuator", "}"); }
| LCUB block-item-list RCUB
  { add_nodes($$)("punctuator", "{")("block-item-list", $2)("punctuator", "}"); }
;

block-item-list
: block-item
  { add_nodes($$)("block-item", $1); }
| block-item-list block-item
  { add_nodes($$)("block-item-list", $1)("block-item", $2); }
;

block-item
: declaration
  { add_nodes($$)("declaration", $1); }
| statement
  { add_nodes($$)("statement", $1); }
;

expression-statement
: SEMI
  { add_nodes($$)("punctuator", ";"); }
| expression SEMI
  { add_nodes($$)("expression", $1)("punctuator", ";"); }
;

selection-statement
: IF LPAR expression RPAR statement
  { add_nodes($$)("keyword", "if")("punctuator", "(")("expression", $3)("punctuator", ")")("statement", $5); }
| IF LPAR expression RPAR statement ELSE statement
  { add_nodes($$)("keyword", "if")("punctuator", "(")("expression", $3)("punctuator", ")")("statement", $5)("keyword", "else")("statement", $7); }
| SWITCH LPAR expression RPAR statement
  { add_nodes($$)("keyword", "switch")("punctuator", "(")("expression", $3)("punctuator", ")")("statement", $5); }
;

iteration-statement
: WHILE LPAR expression RPAR statement
  { add_nodes($$)("keyword", "while")("punctuator", "(")("expression", $3)("punctuator", ")")("statement", $5); }
| DO statement WHILE LPAR expression RPAR SEMI
  { add_nodes($$)("keyword", "do")("statement", $2)("keyword", "while")("punctuator", "(")("expression", $5)("punctuator", ")")("punctuator", ";"); }
| FOR LPAR SEMI SEMI RPAR statement
  { add_nodes($$)("keyword", "for")("punctuator", "(")("punctuator", ";")("punctuator", ";")("punctuator", ")")("statement", $6); }
| FOR LPAR expression SEMI SEMI RPAR statement
  { add_nodes($$)("keyword", "for")("punctuator", "(")("expression", $3)("punctuator", ";")("punctuator", ";")("punctuator", ")")("statement", $7); }
| FOR LPAR SEMI expression SEMI RPAR statement
  { add_nodes($$)("keyword", "for")("punctuator", "(")("punctuator", ";")("expression", $4)("punctuator", ";")("punctuator", ")")("statement", $7); }
| FOR LPAR SEMI SEMI expression RPAR statement
  { add_nodes($$)("keyword", "for")("punctuator", "(")("punctuator", ";")("punctuator", ";")("expression", $5)("punctuator", ")")("statement", $7); }
| FOR LPAR expression SEMI expression SEMI RPAR statement
  { add_nodes($$)("keyword", "for")("punctuator", "(")("expression", $3)("punctuator", ";")("expression", $5)("punctuator", ";")("punctuator", ")")("statement", $8); }
| FOR LPAR expression SEMI SEMI expression RPAR statement
  { add_nodes($$)("keyword", "for")("punctuator", "(")("expression", $3)("punctuator", ";")("punctuator", ";")("expression", $6)("punctuator", ")")("statement", $8); }
| FOR LPAR SEMI expression SEMI expression RPAR statement
  { add_nodes($$)("keyword", "for")("punctuator", "(")("punctuator", ";")("expression", $4)("punctuator", ";")("expression", $6)("punctuator", ")")("statement", $8); }
| FOR LPAR expression SEMI expression SEMI expression RPAR statement
  { add_nodes($$)("keyword", "for")("punctuator", "(")("expression", $3)("punctuator", ";")("expression", $5)("punctuator", ";")("expression", $7)("punctuator", ")")("statement", $9); }
| FOR LPAR declaration SEMI RPAR statement
  { add_nodes($$)("keyword", "for")("punctuator", "(")("declaration", $3)("punctuator", ";")("punctuator", ")")("statement", $6); }
| FOR LPAR declaration expression SEMI RPAR statement
  { add_nodes($$)("keyword", "for")("punctuator", "(")("declaration", $3)("expression", $4)("punctuator", ";")("punctuator", ")")("statement", $7); }
| FOR LPAR declaration SEMI expression RPAR statement
  { add_nodes($$)("keyword", "for")("punctuator", "(")("declaration", $3)("punctuator", ";")("expression", $5)("punctuator", ")")("statement", $7); }
| FOR LPAR declaration expression SEMI expression RPAR statement
  { add_nodes($$)("keyword", "for")("punctuator", "(")("declaration", $3)("expression", $4)("punctuator", ";")("expression", $6)("punctuator", ")")("statement", $8); }
;

jump-statement
: GOTO IDENTIFIER SEMI
  { add_nodes($$)("keyword", "goto")("identifier", $2)("punctuator", ";"); }
| CONTINUE SEMI
  { add_nodes($$)("keyword", "continue")("punctuator", ";"); }
| BREAK SEMI
  { add_nodes($$)("keyword", "break")("punctuator", ";"); }
| RETURN SEMI
  { add_nodes($$)("keyword", "return")("punctuator", ";"); }
| RETURN expression SEMI
  { add_nodes($$)("keyword", "return")("expression", $2)("punctuator", ";"); }
;

translation-unit
: external-declaration
  { add_nodes($$)("external-declaration", $1);
    result = ptree(); result.add_child("translation-unit", $$);
  }
| translation-unit external-declaration
  { add_nodes($$)("translation-unit", $1)("external-declaration", $2);
    result = ptree(); result.add_child("translation-unit", $$); }
;

external-declaration
: function-definition
  { add_nodes($$)("function-definition", $1); }
| declaration
  { add_nodes($$)("declaration", $1); }
;

function-definition
: declaration-specifiers declarator compound-statement
  { add_nodes($$)("declaration-specifiers", $1)("declarator", $2)("compound-statement", $3); }
| declaration-specifiers declarator declaration-list compound-statement
  { add_nodes($$)("declaration-specifiers", $1)("declarator", $2)("declaration-list", $3)("compound-statement", $4); }
;

declaration-list
: declaration
  { add_nodes($$)("declaration", $1); }
| declaration-list declaration
  { add_nodes($$)("declaration-list", $1)("declaration", $2); }
;

%%

auto yy::parser::error(parser::location_type const &location,
                       std::string const &msg) -> void {
  std::cerr << location << ": " << msg << std::endl;
}

static auto add_typedef_names_init_declarator_list(ptree const&) -> void;
static auto add_typedef_names_init_declarator(ptree const&) -> void;
static auto add_typedef_names_declarator(ptree const&) -> void;
static auto add_typedef_names_direct_declarator(ptree const&) -> void;

auto add_typedef_names(ptree const& init_declarator_list) -> void {
  add_typedef_names_init_declarator_list(init_declarator_list);
}

auto add_typedef_names_init_declarator_list(ptree const& init_declarator_list) -> void {
  if (auto const x = init_declarator_list.get_child_optional("init-declarator-list")) {
    add_typedef_names_init_declarator_list(*x);
  }
  add_typedef_names_init_declarator(init_declarator_list.get_child("init-declarator"));
}

auto add_typedef_names_init_declarator(ptree const& init_declarator) -> void {
  add_typedef_names_declarator(init_declarator.get_child("declarator"));
}

auto add_typedef_names_declarator(ptree const& declarator) -> void {
  add_typedef_names_direct_declarator(declarator.get_child("direct-declarator"));
}

auto add_typedef_names_direct_declarator(ptree const& direct_declarator) -> void {
  if (auto const x = direct_declarator.get_child_optional("identifier")) {
    add_typedef_name(x->get_value<std::string>());
  } else if (auto const x = direct_declarator.get_child_optional("declarator")) {
    add_typedef_names_declarator(*x);
  } else if (auto const x = direct_declarator.get_child_optional("direct-declarator")) {
    add_typedef_names_direct_declarator(*x);
  }
}

add_nodes::add_nodes(ptree& target): target(target) {}

auto add_nodes::operator()(std::string const& key, ptree&& child) -> add_nodes& {
  target.add_child(key, std::move(child));
  return *this;
}

auto add_nodes::operator()(std::string const& key, std::string const& value) -> add_nodes& {
  target.add(key, value);
  return *this;
}

/* vim: set ft=yacc ts=2 sw=2 et: */
