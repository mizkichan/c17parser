%code {
/* Unqualified "%code" block which will be emitted into .cpp */
static auto add_typedef_names(ptree const&) -> void;
}

%code requires {
/* "%code requires" block for dependency codes of YYSTYPE and YYLTYPE */
#include <boost/property_tree/ptree.hpp>
using ptree = boost::property_tree::ptree;
}

%code provides {
/* "%code provides" block for declarations in other object files */
#include "lexer.hpp"
}

%define api.value.type variant
%define parse.assert
%define parse.error verbose
%define parse.trace
%language "c++"
%locations
%parse-param {ptree& result}
%require "3.2"

%printer { yyo << $$; } <std::string>
%printer { yyo << $$.template get_value<std::string>(); } <ptree>

%token ALIGNAS "_Alignas"
%token ALIGNOF "_Alignof"
%token ATOMIC "_Atomic"
%token AUTO "auto"
%token BOOL "_Bool"
%token BREAK "break"
%token CASE "case"
%token CHAR "char"
%token COMPLEX "_Complex"
%token CONST "const"
%token CONTINUE "continue"
%token DEFAULT "default"
%token DO "do"
%token DOUBLE "double"
%token ELSE "else"
%token ENUM "enum"
%token EXTERN "extern"
%token FLOAT "float"
%token FOR "for"
%token GENERIC "_Generic"
%token GOTO "goto"
%token IF "if"
%token IMAGINARY "_Imaginary"
%token INLINE "inline"
%token INT "int"
%token LONG "long"
%token NORETURN "_Noreturn"
%token REGISTER "register"
%token RESTRICT "restrict"
%token RETURN "return"
%token SHORT "short"
%token SIGNED "signed"
%token SIZEOF "sizeof"
%token STATIC "static"
%token STATIC_ASSERT "_Static_assert"
%token STRUCT "struct"
%token SWITCH "switch"
%token THREAD_LOCAL "_Thread_local"
%token TYPEDEF "typedef"
%token UNION "union"
%token UNSIGNED "unsigned"
%token VOID "void"
%token VOLATILE "volatile"
%token WHILE "while"

%token AMP "&"
%token AMP_AMP "&&"
%token AMP_EQ "&="
%token AST "*"
%token AST_EQ "*="
%token COLON ":"
%token COMMA ","
%token EQ "="
%token EQ_EQ "=="
%token EXCL "!"
%token EXCL_EQ "!="
%token GT ">"
%token GT_EQ ">="
%token HAT "^"
%token HAT_EQ "^="
%token HELLIP "..."
%token LAQUO "<<"
%token LAQUO_EQ "<<="
%token LCUB "{"
%token LPAR "("
%token LSQB "["
%token LT "<"
%token LT_EQ "<="
%token MINUS "-"
%token MINUS_EQ "-="
%token MINUS_MINUS "--"
%token PERCNT "%"
%token PERCNT_EQ "%="
%token PERIOD "."
%token PLUS "+"
%token PLUS_EQ "+="
%token PLUS_PLUS "++"
%token QUEST "?"
%token RAQUO ">>"
%token RAQUO_EQ ">>="
%token RARR "->"
%token RCUB "}"
%token RPAR ")"
%token RSQB "]"
%token SEMI ";"
%token SOL "/"
%token SOL_EQ "/="
%token TILDE "~"
%token VERT "|"
%token VERT_EQ "|="
%token VERT_VERT "||"

%token <std::string> IDENTIFIER TYPEDEF_NAME INTEGER_CONSTANT FLOATING_CONSTANT ENUMERATION_CONSTANT CHARACTER_CONSTANT STRING_LITERAL
%token END_OF_FILE 0

%type <ptree> constant enumeration_constant primary_expression generic_selection generic_assoc_list generic_association postfix_expression argument_expression_list unary_expression unary_operator cast_expression multiplicative_expression additive_expression shift_expression relational_expression equality_expression AND_expression exclusive_OR_expression inclusive_OR_expression logical_AND_expression logical_OR_expression conditional_expression assignment_expression assignment_operator expression constant_expression declaration declaration_specifiers init_declarator_list init_declarator storage_class_specifier type_specifier struct_or_union_specifier struct_or_union struct_declaration_list struct_declaration specifier_qualifier_list struct_declarator_list struct_declarator enum_specifier enumerator_list enumerator atomic_type_specifier type_qualifier function_specifier alignment_specifier declarator direct_declarator pointer type_qualifier_list parameter_type_list parameter_list parameter_declaration identifier_list type_name abstract_declarator direct_abstract_declarator initializer initializer_list designation designation_list designator static_assert_declaration statement labeled_statement compound_statement block_item_list block_item expression_statement selection_statement iteration_statement jump_statement translation_unit external_declaration function_definition declaration_list

%start translation_unit

%%

constant
: INTEGER_CONSTANT
  {
    $$.add("INTEGER_CONSTANT", $1);
  }
| FLOATING_CONSTANT
  {
    $$.add("FLOATING_CONSTANT", $1);
  }
| ENUMERATION_CONSTANT
  {
    $$.add("ENUMERATION_CONSTANT", $1);
  }
| CHARACTER_CONSTANT
  {
    $$.add("CHARACTER_CONSTANT", $1);
  }
;

enumeration_constant
: IDENTIFIER
  {
    $$.add("IDENTIFIER", $1);
  }
;

primary_expression
: IDENTIFIER
  {
    $$.add("IDENTIFIER", $1);
  }
| constant
  {
    $$.add_child("constant", $1);
  }
| STRING_LITERAL
  {
    $$.add("STRING_LITERAL", $1);
  }
| LPAR expression RPAR
  {
    $$.add("LPAR", "(");
    $$.add_child("expression", $2);
    $$.add("RPAR", ")");
  }
| generic_selection
  {
    $$.add_child("generic_selection", $1);
  }
;

generic_selection
: GENERIC LPAR assignment_expression COMMA generic_assoc_list RPAR
  {
    $$.add("GENERIC", "_Generic");
    $$.add("LPAR", "(");
    $$.add_child("assignment_expression", $3);
    $$.add("COMMA", ",");
    $$.add_child("generic_assoc_list", $5);
    $$.add("RPAR", ")");
  }
;

generic_assoc_list
: generic_association
  {
    $$.add_child("generic_association", $1);
  }
| generic_assoc_list COMMA generic_association
  {
    $$.add_child("generic_assoc_list", $1);
    $$.add("COMMA", ",");
    $$.add_child("generic_association", $3);
  }
;

generic_association
: type_name COLON assignment_expression
  {
    $$.add_child("type_name", $1);
    $$.add("COLON", ":");
    $$.add_child("assignment_expression", $3);
  }
| DEFAULT COLON assignment_expression
  {
    $$.add("DEFAULT", "default");
    $$.add("COLON", ":");
    $$.add_child("assignment_expression", $3);
  }
;

postfix_expression
: primary_expression
  {
    $$.add_child("primary_expression", $1);
  }
| postfix_expression LSQB expression RSQB
  {
    $$.add_child("postfix_expression", $1);
    $$.add("LSQB", "[");
    $$.add_child("expression", $3);
    $$.add("RSQB", "]");
  }
| postfix_expression LPAR RPAR
  {
    $$.add_child("postfix_expression", $1);
    $$.add("LPAR", "(");
    $$.add("RPAR", ")");
  }
| postfix_expression LPAR argument_expression_list RPAR
  {
    $$.add_child("postfix_expression", $1);
    $$.add("LPAR", "(");
    $$.add_child("argument_expression_list", $3);
    $$.add("RPAR", ")");
  }
| postfix_expression PERIOD IDENTIFIER
  {
    $$.add_child("postfix_expression", $1);
    $$.add("PERIOD", ".");
    $$.add("IDENTIFIER", $3);
  }
| postfix_expression RARR IDENTIFIER
  {
    $$.add_child("postfix_expression", $1);
    $$.add("RARR", "->");
    $$.add("IDENTIFIER", $3);
  }
| postfix_expression PLUS_PLUS
  {
    $$.add_child("postfix_expression", $1);
    $$.add("PLUS_PLUS", "++");
  }
| postfix_expression MINUS_MINUS
  {
    $$.add_child("postfix_expression", $1);
    $$.add("MINUS_MINUS", "--");
  }
| LPAR type_name RPAR LCUB initializer_list RCUB
  {
    $$.add("LPAR", "(");
    $$.add_child("type_name", $2);
    $$.add("RPAR", ")");
    $$.add("LCUB", "{");
    $$.add_child("initializer_list", $5);
    $$.add("RCUB", "}");
  }
| LPAR type_name RPAR LCUB initializer_list COMMA RCUB
  {
    $$.add("LPAR", "(");
    $$.add_child("type_name", $2);
    $$.add("RPAR", ")");
    $$.add("LCUB", "{");
    $$.add_child("initializer_list", $5);
    $$.add("COMMA", ",");
    $$.add("RCUB", "}");
  }
;

argument_expression_list
: assignment_expression
  {
    $$.add_child("assignment_expression", $1);
  }
| argument_expression_list COMMA assignment_expression
  {
    $$.add_child("argument_expression_list", $1);
    $$.add("COMMA", ",");
    $$.add_child("assignment_expression", $3);
  }
;

unary_expression
: postfix_expression
  {
    $$.add_child("postfix_expression", $1);
  }
| PLUS_PLUS unary_expression
  {
    $$.add("PLUS_PLUS", "++");
    $$.add_child("unary_expression", $2);
  }
| MINUS_MINUS unary_expression
  {
    $$.add("MINUS_MINUS", "--");
    $$.add_child("unary_expression", $2);
  }
| unary_operator cast_expression
  {
    $$.add_child("unary_operator", $1);
    $$.add_child("cast_expression", $2);
  }
| SIZEOF unary_expression
  {
    $$.add("SIZEOF", "sizeof");
    $$.add_child("unary_expression", $2);
  }
| SIZEOF LPAR type_name RPAR
  {
    $$.add("SIZEOF", "sizeof");
    $$.add("LPAR", "(");
    $$.add_child("type_name", $3);
    $$.add("RPAR", ")");
  }
| ALIGNOF LPAR type_name RPAR
  {
    $$.add("ALIGNOF", "_Alignof");
    $$.add("LPAR", "(");
    $$.add_child("type_name", $3);
    $$.add("RPAR", ")");
  }
;

unary_operator
: AMP
  {
    $$.add("AMP", "&");
  }
| AST
  {
    $$.add("AST", "*");
  }
| PLUS
  {
    $$.add("PLUS", "+");
  }
| MINUS
  {
    $$.add("MINUS", "-");
  }
| TILDE
  {
    $$.add("TILDE", "~");
  }
| EXCL
  {
    $$.add("EXCL", "!");
  }
;

cast_expression
: unary_expression
  {
    $$.add_child("unary_expression", $1);
  }
| LPAR type_name RPAR cast_expression
  {
    $$.add("LPAR", "(");
    $$.add_child("type_name", $2);
    $$.add("RPAR", ")");
    $$.add_child("cast_expression", $4);
  }
;

multiplicative_expression
: cast_expression
  {
    $$.add_child("cast_expression", $1);
  }
| multiplicative_expression AST cast_expression
  {
    $$.add_child("multiplicative_expression", $1);
    $$.add("AST", "*");
    $$.add_child("cast_expression", $3);
  }
| multiplicative_expression SOL cast_expression
  {
    $$.add_child("multiplicative_expression", $1);
    $$.add("SOL", "/");
    $$.add_child("cast_expression", $3);
  }
| multiplicative_expression PERCNT cast_expression
  {
    $$.add_child("multiplicative_expression", $1);
    $$.add("PERCNT", "%");
    $$.add_child("cast_expression", $3);
  }
;

additive_expression
: multiplicative_expression
  {
    $$.add_child("multiplicative_expression", $1);
  }
| additive_expression PLUS multiplicative_expression
  {
    $$.add_child("additive_expression", $1);
    $$.add("PLUS", "+");
    $$.add_child("multiplicative_expression", $3);
  }
| additive_expression MINUS multiplicative_expression
  {
    $$.add_child("additive_expression", $1);
    $$.add("MINUS", "-");
    $$.add_child("multiplicative_expression", $3);
  }
;

shift_expression
: additive_expression
  {
    $$.add_child("additive_expression", $1);
  }
| shift_expression LAQUO additive_expression
  {
    $$.add_child("shift_expression", $1);
    $$.add("LAQUO", "<<");
    $$.add_child("additive_expression", $3);
  }
| shift_expression RAQUO additive_expression
  {
    $$.add_child("shift_expression", $1);
    $$.add("RAQUO", ">>");
    $$.add_child("additive_expression", $3);
  }
;

relational_expression
: shift_expression
  {
    $$.add_child("shift_expression", $1);
  }
| relational_expression LT shift_expression
  {
    $$.add_child("relational_expression", $1);
    $$.add("LT", "<");
    $$.add_child("shift_expression", $3);
  }
| relational_expression GT shift_expression
  {
    $$.add_child("relational_expression", $1);
    $$.add("GT", ">");
    $$.add_child("shift_expression", $3);
  }
| relational_expression LT_EQ shift_expression
  {
    $$.add_child("relational_expression", $1);
    $$.add("LT_EQ", "<=");
    $$.add_child("shift_expression", $3);
  }
| relational_expression GT_EQ shift_expression
  {
    $$.add_child("relational_expression", $1);
    $$.add("GT_EQ", ">=");
    $$.add_child("shift_expression", $3);
  }
;

equality_expression
: relational_expression
  {
    $$.add_child("relational_expression", $1);
  }
| equality_expression EQ_EQ relational_expression
  {
    $$.add_child("equality_expression", $1);
    $$.add("EQ_EQ", "==");
    $$.add_child("relational_expression", $3);
  }
| equality_expression EXCL_EQ relational_expression
  {
    $$.add_child("equality_expression", $1);
    $$.add("EXCL_EQ", "!=");
    $$.add_child("relational_expression", $3);
  }
;

AND_expression
: equality_expression
  {
    $$.add_child("equality_expression", $1);
  }
| AND_expression AMP equality_expression
  {
    $$.add_child("AND_expression", $1);
    $$.add("AMP", "&");
    $$.add_child("equality_expression", $3);
  }
;

exclusive_OR_expression
: AND_expression
  {
    $$.add_child("AND_expression", $1);
  }
| exclusive_OR_expression HAT AND_expression
  {
    $$.add_child("exclusive_OR_expression", $1);
    $$.add("HAT", "^");
    $$.add_child("AND_expression", $3);
  }
;

inclusive_OR_expression
: exclusive_OR_expression
  {
    $$.add_child("exclusive_OR_expression", $1);
  }
| inclusive_OR_expression VERT exclusive_OR_expression
  {
    $$.add_child("inclusive_OR_expression", $1);
    $$.add("VERT", "|");
    $$.add_child("exclusive_OR_expression", $3);
  }
;

logical_AND_expression
: inclusive_OR_expression
  {
    $$.add_child("inclusive_OR_expression", $1);
  }
| logical_AND_expression AMP_AMP inclusive_OR_expression
  {
    $$.add_child("logical_AND_expression", $1);
    $$.add("AMP_AMP", "&&");
    $$.add_child("inclusive_OR_expression", $3);
  }
;

logical_OR_expression
: logical_AND_expression
  {
    $$.add_child("logical_AND_expression", $1);
  }
| logical_OR_expression VERT_VERT logical_AND_expression
  {
    $$.add_child("logical_OR_expression", $1);
    $$.add("VERT_VERT", "||");
    $$.add_child("logical_AND_expression", $3);
  }
;

conditional_expression
: logical_OR_expression
  {
    $$.add_child("logical_OR_expression", $1);
  }
| logical_OR_expression QUEST expression COLON conditional_expression
  {
    $$.add_child("logical_OR_expression", $1);
    $$.add("QUEST", "?");
    $$.add_child("expression", $3);
    $$.add("COLON", ":");
    $$.add_child("conditional_expression", $5);
  }
;

assignment_expression
: conditional_expression
  {
    $$.add_child("conditional_expression", $1);
  }
| unary_expression assignment_operator assignment_expression
  {
    $$.add_child("unary_expression", $1);
    $$.add_child("assignment_operator", $2);
    $$.add_child("assignment_expression", $3);
  }
;

assignment_operator
: EQ
  {
    $$.add("EQ", "=");
  }
| AST_EQ
  {
    $$.add("AST_EQ", "*=");
  }
| SOL_EQ
  {
    $$.add("SOL_EQ", "/=");
  }
| PERCNT_EQ
  {
    $$.add("PERCNT_EQ", "%=");
  }
| PLUS_EQ
  {
    $$.add("PLUS_EQ", "+=");
  }
| MINUS_EQ
  {
    $$.add("MINUS_EQ", "-=");
  }
| LAQUO_EQ
  {
    $$.add("LAQUO_EQ", "<<=");
  }
| RAQUO_EQ
  {
    $$.add("RAQUO_EQ", ">>=");
  }
| AMP_EQ
  {
    $$.add("AMP_EQ", "&=");
  }
| HAT_EQ
  {
    $$.add("HAT_EQ", "^=");
  }
| VERT_EQ
  {
    $$.add("VERT_EQ", "|=");
  }
;

expression
: assignment_expression
  {
    $$.add_child("assignment_expression", $1);
  }
| expression COMMA assignment_expression
  {
    $$.add_child("expression", $1);
    $$.add("COMMA", ",");
    $$.add_child("assignment_expression", $3);
  }
;

constant_expression
: conditional_expression
  {
    $$.add_child("conditional_expression", $1);
  }
;

declaration
: declaration_specifiers SEMI
  {
    $$.add_child("declaration_specifiers", $1);
    $$.add("SEMI", ";");
  }
| declaration_specifiers init_declarator_list SEMI
  {
    $$.add_child("declaration_specifiers", $1);
    $$.add_child("init_declarator_list", $2);
    $$.add("SEMI", ";");

    // Do the lexer hack
    if ($1.get_child_optional("storage_class_specifier.TYPEDEF")) {
      add_typedef_names($2);
    }
  }
| static_assert_declaration
  {
    $$.add_child("static_assert_declaration", $1);
  }
;

declaration_specifiers
: storage_class_specifier
  {
    $$.add_child("storage_class_specifier", $1);
  }
| storage_class_specifier declaration_specifiers
  {
    $$.add_child("storage_class_specifier", $1);
    $$.add_child("declaration_specifiers", $2);
  }
| type_specifier
  {
    $$.add_child("type_specifier", $1);
  }
| type_specifier declaration_specifiers
  {
    $$.add_child("type_specifier", $1);
    $$.add_child("declaration_specifiers", $2);
  }
| type_qualifier
  {
    $$.add_child("type_qualifier", $1);
  }
| type_qualifier declaration_specifiers
  {
    $$.add_child("type_qualifier", $1);
    $$.add_child("declaration_specifiers", $2);
  }
| function_specifier
  {
    $$.add_child("function_specifier", $1);
  }
| function_specifier declaration_specifiers
  {
    $$.add_child("function_specifier", $1);
    $$.add_child("declaration_specifiers", $2);
  }
| alignment_specifier
  {
    $$.add_child("alignment_specifier", $1);
  }
| alignment_specifier declaration_specifiers
  {
    $$.add_child("alignment_specifier", $1);
    $$.add_child("declaration_specifiers", $2);
  }
;

init_declarator_list
: init_declarator
  {
    $$.add_child("init_declarator", $1);
  }
| init_declarator_list COMMA init_declarator
  {
    $$.add_child("init_declarator_list", $1);
    $$.add("COMMA", ",");
    $$.add_child("init_declarator", $3);
  }
;

init_declarator
: declarator
  {
    $$.add_child("declarator", $1);
  }
| declarator EQ initializer
  {
    $$.add_child("declarator", $1);
    $$.add("EQ", "=");
    $$.add_child("initializer", $3);
  }
;

storage_class_specifier
: TYPEDEF
  {
    $$.add("TYPEDEF", "typedef");
  }
| EXTERN
  {
    $$.add("EXTERN", "extern");
  }
| STATIC
  {
    $$.add("STATIC", "static");
  }
| THREAD_LOCAL
  {
    $$.add("THREAD_LOCAL", "_Thread_local");
  }
| AUTO
  {
    $$.add("AUTO", "auto");
  }
| REGISTER
  {
    $$.add("REGISTER", "register");
  }
;

type_specifier
: VOID
  {
    $$.add("VOID", "void");
  }
| CHAR
  {
    $$.add("CHAR", "char");
  }
| SHORT
  {
    $$.add("SHORT", "short");
  }
| INT
  {
    $$.add("INT", "int");
  }
| LONG
  {
    $$.add("LONG", "long");
  }
| FLOAT
  {
    $$.add("FLOAT", "float");
  }
| DOUBLE
  {
    $$.add("DOUBLE", "double");
  }
| SIGNED
  {
    $$.add("SIGNED", "signed");
  }
| UNSIGNED
  {
    $$.add("UNSIGNED", "unsigned");
  }
| BOOL
  {
    $$.add("BOOL", "_Bool");
  }
| COMPLEX
  {
    $$.add("COMPLEX", "_Complex");
  }
| atomic_type_specifier
  {
    $$.add_child("atomic_type_specifier", $1);
  }
| struct_or_union_specifier
  {
    $$.add_child("struct_or_union_specifier", $1);
  }
| enum_specifier
  {
    $$.add_child("enum_specifier", $1);
  }
| TYPEDEF_NAME
  {
    $$.add("TYPEDEF_NAME", $1);
  }
;

struct_or_union_specifier
: struct_or_union LCUB struct_declaration_list RCUB
  {
    $$.add_child("struct_or_union", $1);
    $$.add("LCUB", "{");
    $$.add_child("struct_declaration_list", $3);
    $$.add("RCUB", "}");
  }
| struct_or_union IDENTIFIER LCUB struct_declaration_list RCUB
  {
    $$.add_child("struct_or_union", $1);
    $$.add("IDENTIFIER", $2);
    $$.add("LCUB", "{");
    $$.add_child("struct_declaration_list", $4);
    $$.add("RCUB", "}");
  }
| struct_or_union IDENTIFIER
  {
    $$.add_child("struct_or_union", $1);
    $$.add("IDENTIFIER", $2);
  }
;

struct_or_union
: STRUCT
  {
    $$.add("STRUCT", "struct");
  }
| UNION
  {
    $$.add("UNION", "union");
  }
;

struct_declaration_list
: struct_declaration
  {
    $$.add_child("struct_declaration", $1);
  }
| struct_declaration_list struct_declaration
  {
    $$.add_child("struct_declaration_list", $1);
    $$.add_child("struct_declaration", $2);
  }
;

struct_declaration
: specifier_qualifier_list SEMI
  {
    $$.add_child("specifier_qualifier_list", $1);
    $$.add("SEMI", ";");
  }
| specifier_qualifier_list struct_declarator_list SEMI
  {
    $$.add_child("specifier_qualifier_list", $1);
    $$.add_child("struct_declarator_list", $2);
    $$.add("SEMI", ";");
  }
| static_assert_declaration
  {
    $$.add_child("static_assert_declaration", $1);
  }
;

specifier_qualifier_list
: type_specifier
  {
    $$.add_child("type_specifier", $1);
  }
| type_specifier specifier_qualifier_list
  {
    $$.add_child("type_specifier", $1);
    $$.add_child("specifier_qualifier_list", $2);
  }
| type_qualifier
  {
    $$.add_child("type_qualifier", $1);
  }
| type_qualifier specifier_qualifier_list
  {
    $$.add_child("type_qualifier", $1);
    $$.add_child("specifier_qualifier_list", $2);
  }
| alignment_specifier
  {
    $$.add_child("alignment_specifier", $1);
  }
| alignment_specifier specifier_qualifier_list
  {
    $$.add_child("alignment_specifier", $1);
    $$.add_child("specifier_qualifier_list", $2);
  }
;

struct_declarator_list
: struct_declarator
  {
    $$.add_child("struct_declarator", $1);
  }
| struct_declarator_list COMMA struct_declarator
  {
    $$.add_child("struct_declarator_list", $1);
    $$.add("COMMA", ",");
    $$.add_child("struct_declarator", $3);
  }
;

struct_declarator
: declarator
  {
    $$.add_child("declarator", $1);
  }
| COLON constant_expression
  {
    $$.add("COLON", ":");
    $$.add_child("constant_expression", $2);
  }
| declarator COLON constant_expression
  {
    $$.add_child("declarator", $1);
    $$.add("COLON", ":");
    $$.add_child("constant_expression", $3);
  }
;

enum_specifier
: ENUM LCUB enumerator_list RCUB
  {
    $$.add("ENUM", "enum");
    $$.add("LCUB", "{");
    $$.add_child("enumerator_list", $3);
    $$.add("RCUB", "}");
  }
| ENUM IDENTIFIER LCUB enumerator_list RCUB
  {
    $$.add("ENUM", "enum");
    $$.add("IDENTIFIER", $2);
    $$.add("LCUB", "{");
    $$.add_child("enumerator_list", $4);
    $$.add("RCUB", "}");
  }
| ENUM LCUB enumerator_list COMMA RCUB
  {
    $$.add("ENUM", "enum");
    $$.add("LCUB", "{");
    $$.add_child("enumerator_list", $3);
    $$.add("COMMA", ",");
    $$.add("RCUB", "}");
  }
| ENUM IDENTIFIER LCUB enumerator_list COMMA RCUB
  {
    $$.add("ENUM", "enum");
    $$.add("IDENTIFIER", $2);
    $$.add("LCUB", "{");
    $$.add_child("enumerator_list", $4);
    $$.add("COMMA", ",");
    $$.add("RCUB", "}");
  }
| ENUM IDENTIFIER
  {
    $$.add("ENUM", "enum");
    $$.add("IDENTIFIER", $2);
  }
;

enumerator_list
: enumerator
  {
    $$.add_child("enumerator", $1);
  }
| enumerator_list COMMA enumerator
  {
    $$.add_child("enumerator_list", $1);
    $$.add("COMMA", ",");
    $$.add_child("enumerator", $3);
  }
;

enumerator
: enumeration_constant
  {
    $$.add_child("enumeration_constant", $1);
  }
| enumeration_constant EQ constant_expression
  {
    $$.add_child("enumeration_constant", $1);
    $$.add("EQ", "=");
    $$.add_child("constant_expression", $3);
  }
;

/* NOTE: following two rules make grammar ambiguous.
 * See https://stackoverflow.com/questions/10668941/c11-grammar-ambiguity-between-atomic-type-specifier-and-qualifier
 */

atomic_type_specifier
: ATOMIC LPAR type_name RPAR
  {
    $$.add("ATOMIC", "_Atomic");
    $$.add("LPAR", "(");
    $$.add_child("type_name", $3);
    $$.add("RPAR", ")");
  }
;

type_qualifier
: CONST
  {
    $$.add("CONST", "const");
  }
| RESTRICT
  {
    $$.add("RESTRICT", "restrict");
  }
| VOLATILE
  {
    $$.add("VOLATILE", "volatile");
  }
| ATOMIC
  {
    $$.add("ATOMIC", "_Atomic");
  }
;

function_specifier
: INLINE
  {
    $$.add("INLINE", "inline");
  }
| NORETURN
  {
    $$.add("NORETURN", "_Noreturn");
  }
;

alignment_specifier
: ALIGNAS LPAR type_name RPAR
  {
    $$.add("ALIGNAS", "_Alignas");
    $$.add("LPAR", "(");
    $$.add_child("type_name", $3);
    $$.add("RPAR", ")");
  }
| ALIGNAS LPAR constant_expression RPAR
  {
    $$.add("ALIGNAS", "_Alignas");
    $$.add("LPAR", "(");
    $$.add_child("constant_expression", $3);
    $$.add("RPAR", ")");
  }
;

declarator
: direct_declarator
  {
    $$.add_child("direct_declarator", $1);
  }
| pointer direct_declarator
  {
    $$.add_child("pointer", $1);
    $$.add_child("direct_declarator", $2);
  }
;

direct_declarator
: IDENTIFIER
  {
    $$.add("IDENTIFIER", $1);
  }
| LPAR declarator RPAR
  {
    $$.add("LPAR", "(");
    $$.add_child("declarator", $2);
    $$.add("RPAR", ")");
  }
| direct_declarator LSQB RSQB
  {
    $$.add_child("direct_declarator", $1);
    $$.add("LSQB", "[");
    $$.add("RSQB", "]");
  }
| direct_declarator LSQB type_qualifier_list RSQB
  {
    $$.add_child("direct_declarator", $1);
    $$.add("LSQB", "[");
    $$.add_child("type_qualifier_list", $3);
    $$.add("RSQB", "]");
  }
| direct_declarator LSQB assignment_expression RSQB
  {
    $$.add_child("direct_declarator", $1);
    $$.add("LSQB", "[");
    $$.add_child("assignment_expression", $3);
    $$.add("RSQB", "]");
  }
| direct_declarator LSQB type_qualifier_list assignment_expression RSQB
  {
    $$.add_child("direct_declarator", $1);
    $$.add("LSQB", "[");
    $$.add_child("type_qualifier_list", $3);
    $$.add_child("assignment_expression", $4);
    $$.add("RSQB", "]");
  }
| direct_declarator LSQB STATIC assignment_expression RSQB
  {
    $$.add_child("direct_declarator", $1);
    $$.add("LSQB", "[");
    $$.add("STATIC", "static");
    $$.add_child("assignment_expression", $4);
    $$.add("RSQB", "]");
  }
| direct_declarator LSQB STATIC type_qualifier_list assignment_expression RSQB
  {
    $$.add_child("direct_declarator", $1);
    $$.add("LSQB", "[");
    $$.add("STATIC", "static");
    $$.add_child("type_qualifier_list", $4);
    $$.add_child("assignment_expression", $5);
    $$.add("RSQB", "]");
  }
| direct_declarator LSQB type_qualifier_list STATIC assignment_expression RSQB
  {
    $$.add_child("direct_declarator", $1);
    $$.add("LSQB", "[");
    $$.add_child("type_qualifier_list", $3);
    $$.add("STATIC", "static");
    $$.add_child("assignment_expression", $5);
    $$.add("RSQB", "]");
  }
| direct_declarator LSQB AST RSQB
  {
    $$.add_child("direct_declarator", $1);
    $$.add("LSQB", "[");
    $$.add("AST", "*");
    $$.add("RSQB", "]");
  }
| direct_declarator LSQB type_qualifier_list AST RSQB
  {
    $$.add_child("direct_declarator", $1);
    $$.add("LSQB", "[");
    $$.add_child("type_qualifier_list", $3);
    $$.add("AST", "*");
    $$.add("RSQB", "]");
  }
| direct_declarator LPAR parameter_type_list RPAR
  {
    $$.add_child("direct_declarator", $1);
    $$.add("LPAR", "(");
    $$.add_child("parameter_type_list", $3);
    $$.add("RPAR", ")");
  }
| direct_declarator LPAR RPAR
  {
    $$.add_child("direct_declarator", $1);
    $$.add("LPAR", "(");
    $$.add("RPAR", ")");
  }
| direct_declarator LPAR identifier_list RPAR
  {
    $$.add_child("direct_declarator", $1);
    $$.add("LPAR", "(");
    $$.add_child("identifier_list", $3);
    $$.add("RPAR", ")");
  }
;

pointer
: AST
  {
    $$.add("AST", "*");
  }
| AST type_qualifier_list
  {
    $$.add("AST", "*");
    $$.add_child("type_qualifier_list", $2);
  }
| AST pointer
  {
    $$.add("AST", "*");
    $$.add_child("pointer", $2);
  }
| AST type_qualifier_list pointer
  {
    $$.add("AST", "*");
    $$.add_child("type_qualifier_list", $2);
    $$.add_child("pointer", $3);
  }
;

type_qualifier_list
: type_qualifier
  {
    $$.add_child("type_qualifier", $1);
  }
| type_qualifier_list type_qualifier
  {
    $$.add_child("type_qualifier_list", $1);
    $$.add_child("type_qualifier", $2);
  }
;

parameter_type_list
: parameter_list
  {
    $$.add_child("parameter_list", $1);
  }
| parameter_list COMMA HELLIP
  {
    $$.add_child("parameter_list", $1);
    $$.add("COMMA", ",");
    $$.add("HELLIP", "...");
  }
;

parameter_list
: parameter_declaration
  {
    $$.add_child("parameter_declaration", $1);
  }
| parameter_list COMMA parameter_declaration
  {
    $$.add_child("parameter_list", $1);
    $$.add("COMMA", ",");
    $$.add_child("parameter_declaration", $3);
  }
;

parameter_declaration
: declaration_specifiers declarator
  {
    $$.add_child("declaration_specifiers", $1);
    $$.add_child("declarator", $2);
  }
| declaration_specifiers
  {
    $$.add_child("declaration_specifiers", $1);
  }
| declaration_specifiers abstract_declarator
  {
    $$.add_child("declaration_specifiers", $1);
    $$.add_child("abstract_declarator", $2);
  }
;

identifier_list
: IDENTIFIER
  {
    $$.add("IDENTIFIER", $1);
  }
| identifier_list COMMA IDENTIFIER
  {
    $$.add_child("identifier_list", $1);
    $$.add("COMMA", ",");
    $$.add("IDENTIFIER", $3);
  }
;

type_name
: specifier_qualifier_list
  {
    $$.add_child("specifier_qualifier_list", $1);
  }
| specifier_qualifier_list abstract_declarator
  {
    $$.add_child("specifier_qualifier_list", $1);
    $$.add_child("abstract_declarator", $2);
  }
;

abstract_declarator
: pointer
  {
    $$.add_child("pointer", $1);
  }
| direct_abstract_declarator
  {
    $$.add_child("direct_abstract_declarator", $1);
  }
| pointer direct_abstract_declarator
  {
    $$.add_child("pointer", $1);
    $$.add_child("direct_abstract_declarator", $2);
  }
;

direct_abstract_declarator
: LPAR abstract_declarator RPAR
  {
    $$.add("LPAR", "(");
    $$.add_child("abstract_declarator", $2);
    $$.add("RPAR", ")");
  }
| LSQB RSQB
  {
    $$.add("LSQB", "[");
    $$.add("RSQB", "]");
  }
| direct_abstract_declarator LSQB RSQB
  {
    $$.add_child("direct_abstract_declarator", $1);
    $$.add("LSQB", "[");
    $$.add("RSQB", "]");
  }
| LSQB type_qualifier_list RSQB
  {
    $$.add("LSQB", "[");
    $$.add_child("type_qualifier_list", $2);
    $$.add("RSQB", "]");
  }
| direct_abstract_declarator LSQB type_qualifier_list RSQB
  {
    $$.add_child("direct_abstract_declarator", $1);
    $$.add("LSQB", "[");
    $$.add_child("type_qualifier_list", $3);
    $$.add("RSQB", "]");
  }
| LSQB assignment_expression RSQB
  {
    $$.add("LSQB", "[");
    $$.add_child("assignment_expression", $2);
    $$.add("RSQB", "]");
  }
| direct_abstract_declarator LSQB assignment_expression RSQB
  {
    $$.add_child("direct_abstract_declarator", $1);
    $$.add("LSQB", "[");
    $$.add_child("assignment_expression", $3);
    $$.add("RSQB", "]");
  }
| LSQB type_qualifier_list assignment_expression RSQB
  {
    $$.add("LSQB", "[");
    $$.add_child("type_qualifier_list", $2);
    $$.add_child("assignment_expression", $3);
    $$.add("RSQB", "]");
  }
| direct_abstract_declarator LSQB type_qualifier_list assignment_expression RSQB
  {
    $$.add_child("direct_abstract_declarator", $1);
    $$.add("LSQB", "[");
    $$.add_child("type_qualifier_list", $3);
    $$.add_child("assignment_expression", $4);
    $$.add("RSQB", "]");
  }
| LSQB STATIC assignment_expression RSQB
  {
    $$.add("LSQB", "[");
    $$.add("STATIC", "static");
    $$.add_child("assignment_expression", $3);
    $$.add("RSQB", "]");
  }
| direct_abstract_declarator LSQB STATIC assignment_expression RSQB
  {
    $$.add_child("direct_abstract_declarator", $1);
    $$.add("LSQB", "[");
    $$.add("STATIC", "static");
    $$.add_child("assignment_expression", $4);
    $$.add("RSQB", "]");
  }
| LSQB STATIC type_qualifier_list assignment_expression RSQB
  {
    $$.add("LSQB", "[");
    $$.add("STATIC", "static");
    $$.add_child("type_qualifier_list", $3);
    $$.add_child("assignment_expression", $4);
    $$.add("RSQB", "]");
  }
| direct_abstract_declarator LSQB STATIC type_qualifier_list assignment_expression RSQB
  {
    $$.add_child("direct_abstract_declarator", $1);
    $$.add("LSQB", "[");
    $$.add("STATIC", "static");
    $$.add_child("type_qualifier_list", $4);
    $$.add_child("assignment_expression", $5);
    $$.add("RSQB", "]");
  }
| LSQB type_qualifier_list STATIC assignment_expression RSQB
  {
    $$.add("LSQB", "[");
    $$.add_child("type_qualifier_list", $2);
    $$.add("STATIC", "static");
    $$.add_child("assignment_expression", $4);
    $$.add("RSQB", "]");
  }
| direct_abstract_declarator LSQB type_qualifier_list STATIC assignment_expression RSQB
  {
    $$.add_child("direct_abstract_declarator", $1);
    $$.add("LSQB", "[");
    $$.add_child("type_qualifier_list", $3);
    $$.add("STATIC", "static");
    $$.add_child("assignment_expression", $5);
    $$.add("RSQB", "]");
  }
| LSQB AST RSQB
  {
    $$.add("LSQB", "[");
    $$.add("AST", "*");
    $$.add("RSQB", "]");
  }
| direct_abstract_declarator LSQB AST RSQB
  {
    $$.add_child("direct_abstract_declarator", $1);
    $$.add("LSQB", "[");
    $$.add("AST", "*");
    $$.add("RSQB", "]");
  }
| LPAR RPAR
  {
    $$.add("LPAR", "(");
    $$.add("RPAR", ")");
  }
| direct_abstract_declarator LPAR RPAR
  {
    $$.add_child("direct_abstract_declarator", $1);
    $$.add("LPAR", "(");
    $$.add("RPAR", ")");
  }
| LPAR parameter_type_list RPAR
  {
    $$.add("LPAR", "(");
    $$.add_child("parameter_type_list", $2);
    $$.add("RPAR", ")");
  }
| direct_abstract_declarator LPAR parameter_type_list RPAR
  {
    $$.add_child("direct_abstract_declarator", $1);
    $$.add("LPAR", "(");
    $$.add_child("parameter_type_list", $3);
    $$.add("RPAR", ")");
  }
;

initializer
: assignment_expression
  {
    $$.add_child("assignment_expression", $1);
  }
| LCUB initializer_list RCUB
  {
    $$.add("LCUB", "{");
    $$.add_child("initializer_list", $2);
    $$.add("RCUB", "}");
  }
| LCUB identifier_list COMMA RCUB
  {
    $$.add("LCUB", "{");
    $$.add_child("identifier_list", $2);
    $$.add("COMMA", ",");
    $$.add("RCUB", "}");
  }
;

initializer_list
: initializer
  {
    $$.add_child("initializer", $1);
  }
| designation initializer
  {
    $$.add_child("designation", $1);
    $$.add_child("initializer", $2);
  }
| initializer_list COMMA initializer
  {
    $$.add_child("initializer_list", $1);
    $$.add("COMMA", ",");
    $$.add_child("initializer", $3);
  }
| initializer_list COMMA designation initializer
  {
    $$.add_child("initializer_list", $1);
    $$.add("COMMA", ",");
    $$.add_child("designation", $3);
    $$.add_child("initializer", $4);
  }
;

designation
: designation_list EQ
  {
    $$.add_child("designation_list", $1);
    $$.add("EQ", "=");
  }
;

designation_list
: designator
  {
    $$.add_child("designator", $1);
  }
| designation_list designator
  {
    $$.add_child("designation_list", $1);
    $$.add_child("designator", $2);
  }
;

designator
: LSQB constant_expression RSQB
  {
    $$.add("LSQB", "[");
    $$.add_child("constant_expression", $2);
    $$.add("RSQB", "]");
  }
| PERIOD IDENTIFIER
  {
    $$.add("PERIOD", ".");
    $$.add("IDENTIFIER", $2);
  }
;

static_assert_declaration
: STATIC_ASSERT LPAR constant_expression COMMA STRING_LITERAL RPAR SEMI
  {
    $$.add("STATIC_ASSERT", "_Static_assert");
    $$.add("LPAR", "(");
    $$.add_child("constant_expression", $3);
    $$.add("COMMA", ",");
    $$.add("STRING_LITERAL", $5);
    $$.add("RPAR", ")");
    $$.add("SEMI", ";");
  }
;

statement
: labeled_statement
  {
    $$.add_child("labeled_statement", $1);
  }
| compound_statement
  {
    $$.add_child("compound_statement", $1);
  }
| expression_statement
  {
    $$.add_child("expression_statement", $1);
  }
| selection_statement
  {
    $$.add_child("selection_statement", $1);
  }
| iteration_statement
  {
    $$.add_child("iteration_statement", $1);
  }
| jump_statement
  {
    $$.add_child("jump_statement", $1);
  }
;

labeled_statement
: IDENTIFIER COLON statement
  {
    $$.add("IDENTIFIER", $1);
    $$.add("COLON", ":");
    $$.add_child("statement", $3);
  }
| CASE constant_expression COLON statement
  {
    $$.add("CASE", "case");
    $$.add_child("constant_expression", $2);
    $$.add("COLON", ":");
    $$.add_child("statement", $4);
  }
| DEFAULT COLON statement
  {
    $$.add("DEFAULT", "default");
    $$.add("COLON", ":");
    $$.add_child("statement", $3);
  }
;

compound_statement
: LCUB RCUB
  {
    $$.add("LCUB", "{");
    $$.add("RCUB", "}");
  }
| LCUB block_item_list RCUB
  {
    $$.add("LCUB", "{");
    $$.add_child("block_item_list", $2);
    $$.add("RCUB", "}");
  }
;

block_item_list
: block_item
  {
    $$.add_child("block_item", $1);
  }
| block_item_list block_item
  {
    $$.add_child("block_item_list", $1);
    $$.add_child("block_item", $2);
  }
;

block_item
: declaration
  {
    $$.add_child("declaration", $1);
  }
| statement
  {
    $$.add_child("statement", $1);
  }
;

expression_statement
: SEMI
  {
    $$.add("SEMI", ";");
  }
| expression SEMI
  {
    $$.add_child("expression", $1);
    $$.add("SEMI", ";");
  }
;

selection_statement
: IF LPAR expression RPAR statement
  {
    $$.add("IF", "if");
    $$.add("LPAR", "(");
    $$.add_child("expression", $3);
    $$.add("RPAR", ")");
    $$.add_child("statement", $5);
  }
| IF LPAR expression RPAR statement ELSE statement
  {
    $$.add("IF", "if");
    $$.add("LPAR", "(");
    $$.add_child("expression", $3);
    $$.add("RPAR", ")");
    $$.add_child("statement", $5);
    $$.add("ELSE", "else");
    $$.add_child("statement", $7);
  }
| SWITCH LPAR expression RPAR statement
  {
    $$.add("SWITCH", "switch");
    $$.add("LPAR", "(");
    $$.add_child("expression", $3);
    $$.add("RPAR", ")");
    $$.add_child("statement", $5);
  }
;

iteration_statement
: WHILE LPAR expression RPAR statement
  {
    $$.add("WHILE", "while");
    $$.add("LPAR", "(");
    $$.add_child("expression", $3);
    $$.add("RPAR", ")");
    $$.add_child("statement", $5);
  }
| DO statement WHILE LPAR expression RPAR SEMI
  {
    $$.add("DO", "do");
    $$.add_child("statement", $2);
    $$.add("WHILE", "while");
    $$.add("LPAR", "(");
    $$.add_child("expression", $5);
    $$.add("RPAR", ")");
    $$.add("SEMI", ";");
  }
| FOR LPAR SEMI SEMI RPAR statement
  {
    $$.add("FOR", "for");
    $$.add("LPAR", "(");
    $$.add("SEMI", ";");
    $$.add("SEMI", ";");
    $$.add("RPAR", ")");
    $$.add_child("statement", $6);
  }
| FOR LPAR expression SEMI SEMI RPAR statement
  {
    $$.add("FOR", "for");
    $$.add("LPAR", "(");
    $$.add_child("expression", $3);
    $$.add("SEMI", ";");
    $$.add("SEMI", ";");
    $$.add("RPAR", ")");
    $$.add_child("statement", $7);
  }
| FOR LPAR SEMI expression SEMI RPAR statement
  {
    $$.add("FOR", "for");
    $$.add("LPAR", "(");
    $$.add("SEMI", ";");
    $$.add_child("expression", $4);
    $$.add("SEMI", ";");
    $$.add("RPAR", ")");
    $$.add_child("statement", $7);
  }
| FOR LPAR SEMI SEMI expression RPAR statement
  {
    $$.add("FOR", "for");
    $$.add("LPAR", "(");
    $$.add("SEMI", ";");
    $$.add("SEMI", ";");
    $$.add_child("expression", $5);
    $$.add("RPAR", ")");
    $$.add_child("statement", $7);
  }
| FOR LPAR expression SEMI expression SEMI RPAR statement
  {
    $$.add("FOR", "for");
    $$.add("LPAR", "(");
    $$.add_child("expression", $3);
    $$.add("SEMI", ";");
    $$.add_child("expression", $5);
    $$.add("SEMI", ";");
    $$.add("RPAR", ")");
    $$.add_child("statement", $8);
  }
| FOR LPAR expression SEMI SEMI expression RPAR statement
  {
    $$.add("FOR", "for");
    $$.add("LPAR", "(");
    $$.add_child("expression", $3);
    $$.add("SEMI", ";");
    $$.add("SEMI", ";");
    $$.add_child("expression", $6);
    $$.add("RPAR", ")");
    $$.add_child("statement", $8);
  }
| FOR LPAR SEMI expression SEMI expression RPAR statement
  {
    $$.add("FOR", "for");
    $$.add("LPAR", "(");
    $$.add("SEMI", ";");
    $$.add_child("expression", $4);
    $$.add("SEMI", ";");
    $$.add_child("expression", $6);
    $$.add("RPAR", ")");
    $$.add_child("statement", $8);
  }
| FOR LPAR expression SEMI expression SEMI expression RPAR statement
  {
    $$.add("FOR", "for");
    $$.add("LPAR", "(");
    $$.add_child("expression", $3);
    $$.add("SEMI", ";");
    $$.add_child("expression", $5);
    $$.add("SEMI", ";");
    $$.add_child("expression", $7);
    $$.add("RPAR", ")");
    $$.add_child("statement", $9);
  }
| FOR LPAR declaration SEMI RPAR statement
  {
    $$.add("FOR", "for");
    $$.add("LPAR", "(");
    $$.add_child("declaration", $3);
    $$.add("SEMI", ";");
    $$.add("RPAR", ")");
    $$.add_child("statement", $6);
  }
| FOR LPAR declaration expression SEMI RPAR statement
  {
    $$.add("FOR", "for");
    $$.add("LPAR", "(");
    $$.add_child("declaration", $3);
    $$.add_child("expression", $4);
    $$.add("SEMI", ";");
    $$.add("RPAR", ")");
    $$.add_child("statement", $7);
  }
| FOR LPAR declaration SEMI expression RPAR statement
  {
    $$.add("FOR", "for");
    $$.add("LPAR", "(");
    $$.add_child("declaration", $3);
    $$.add("SEMI", ";");
    $$.add_child("expression", $5);
    $$.add("RPAR", ")");
    $$.add_child("statement", $7);
  }
| FOR LPAR declaration expression SEMI expression RPAR statement
  {
    $$.add("FOR", "for");
    $$.add("LPAR", "(");
    $$.add_child("declaration", $3);
    $$.add_child("expression", $4);
    $$.add("SEMI", ";");
    $$.add_child("expression", $6);
    $$.add("RPAR", ")");
    $$.add_child("statement", $8);
  }
;

jump_statement
: GOTO IDENTIFIER SEMI
  {
    $$.add("GOTO", "goto");
    $$.add("IDENTIFIER", $2);
    $$.add("SEMI", ";");
  }
| CONTINUE SEMI
  {
    $$.add("CONTINUE", "continue");
    $$.add("SEMI", ";");
  }
| BREAK SEMI
  {
    $$.add("BREAK", "break");
    $$.add("SEMI", ";");
  }
| RETURN SEMI
  {
    $$.add("RETURN", "return");
    $$.add("SEMI", ";");
  }
| RETURN expression SEMI
  {
    $$.add("RETURN", "return");
    $$.add_child("expression", $2);
    $$.add("SEMI", ";");
  }
;

translation_unit
: external_declaration
  {
    $$.add_child("external_declaration", $1);
    result = ptree();
    result.add_child("translation_unit", $$);
  }
| translation_unit external_declaration
  {
    $$.add_child("translation_unit", $1);
    $$.add_child("external_declaration", $2);
    result = ptree();
    result.add_child("translation_unit", $$);
  }
;

external_declaration
: function_definition
  {
    $$.add_child("function_definition", $1);
  }
| declaration
  {
    $$.add_child("declaration", $1);
  }
;

function_definition
: declaration_specifiers declarator compound_statement
  {
    $$.add_child("declaration_specifiers", $1);
    $$.add_child("declarator", $2);
    $$.add_child("compound_statement", $3);
  }
| declaration_specifiers declarator declaration_list compound_statement
  {
    $$.add_child("declaration_specifiers", $1);
    $$.add_child("declarator", $2);
    $$.add_child("declaration_list", $3);
    $$.add_child("compound_statement", $4);
  }
;

declaration_list
: declaration
  {
    $$.add_child("declaration", $1);
  }
| declaration_list declaration
  {
    $$.add_child("declaration_list", $1);
    $$.add_child("declaration", $2);
  }
;

%%

auto yy::parser::error(parser::location_type const &location,
                       std::string const &msg) -> void {
  std::cerr << location << ": " << msg << std::endl;
}

static auto add_typedef_names_init_declarator_list(ptree const&) -> void;
static auto add_typedef_names_init_declarator(ptree const&) -> void;
static auto add_typedef_names_declarator(ptree const&) -> void;
static auto add_typedef_names_direct_declarator(ptree const&) -> void;

auto add_typedef_names(ptree const& init_declarator_list) -> void {
  add_typedef_names_init_declarator_list(init_declarator_list);
}

auto add_typedef_names_init_declarator_list(ptree const& init_declarator_list) -> void {
  if (auto const x = init_declarator_list.get_child_optional("init_declarator_list")) {
    add_typedef_names_init_declarator_list(*x);
  }
  add_typedef_names_init_declarator(init_declarator_list.get_child("init_declarator"));
}

static auto add_typedef_names_init_declarator(ptree const& init_declarator) -> void {
  add_typedef_names_declarator(init_declarator.get_child("declarator"));
}

static auto add_typedef_names_declarator(ptree const& declarator) -> void {
  add_typedef_names_direct_declarator(declarator.get_child("direct_declarator"));
}

static auto add_typedef_names_direct_declarator(ptree const& direct_declarator) -> void {
  if (auto const x = direct_declarator.get_child_optional("IDENTIFIER")) {
    add_typedef_name(x->get_value<std::string>());
  } else if (auto const x = direct_declarator.get_child_optional("declarator")) {
    add_typedef_names_declarator(*x);
  } else if (auto const x = direct_declarator.get_child_optional("direct_declarator")) {
    add_typedef_names_direct_declarator(*x);
  }
}

/* vim: set ft=yacc ts=2 sw=2 et: */
