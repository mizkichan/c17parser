%code {
/* Unqualified "%code" block which will be emitted into .cpp */
static auto add_typedef_names(ptree const&) -> void;
}

%code requires {
/* "%code requires" block for dependency codes of YYSTYPE and YYLTYPE */
#include <boost/property_tree/ptree.hpp>
using ptree = boost::property_tree::ptree;
}

%code provides {
/* "%code provides" block for declarations in other object files */
#include "lexer.hpp"
}

%define api.value.type variant
%define parse.assert
%define parse.error verbose
%define parse.trace
%language "c++"
%locations
%parse-param {ptree& result}
%require "3.2"

%printer { yyo << $$; } <std::string>
%printer { yyo << $$.template get_value<std::string>(); } <ptree>

%token ALIGNAS "_Alignas"
%token ALIGNOF "_Alignof"
%token ATOMIC "_Atomic"
%token AUTO "auto"
%token BOOL "_Bool"
%token BREAK "break"
%token CASE "case"
%token CHAR "char"
%token COMPLEX "_Complex"
%token CONST "const"
%token CONTINUE "continue"
%token DEFAULT "default"
%token DO "do"
%token DOUBLE "double"
%token ELSE "else"
%token ENUM "enum"
%token EXTERN "extern"
%token FLOAT "float"
%token FOR "for"
%token GENERIC "_Generic"
%token GOTO "goto"
%token IF "if"
%token IMAGINARY "_Imaginary"
%token INLINE "inline"
%token INT "int"
%token LONG "long"
%token NORETURN "_Noreturn"
%token REGISTER "register"
%token RESTRICT "restrict"
%token RETURN "return"
%token SHORT "short"
%token SIGNED "signed"
%token SIZEOF "sizeof"
%token STATIC "static"
%token STATIC_ASSERT "_Static_assert"
%token STRUCT "struct"
%token SWITCH "switch"
%token THREAD_LOCAL "_Thread_local"
%token TYPEDEF "typedef"
%token UNION "union"
%token UNSIGNED "unsigned"
%token VOID "void"
%token VOLATILE "volatile"
%token WHILE "while"

%token AMP "&"
%token AMP_AMP "&&"
%token AMP_EQ "&="
%token AST "*"
%token AST_EQ "*="
%token COLON ":"
%token COMMA ","
%token EQ "="
%token EQ_EQ "=="
%token EXCL "!"
%token EXCL_EQ "!="
%token GT ">"
%token GT_EQ ">="
%token HAT "^"
%token HAT_EQ "^="
%token HELLIP "..."
%token LAQUO "<<"
%token LAQUO_EQ "<<="
%token LCUB "{"
%token LPAR "("
%token LSQB "["
%token LT "<"
%token LT_EQ "<="
%token MINUS "-"
%token MINUS_EQ "-="
%token MINUS_MINUS "--"
%token PERCNT "%"
%token PERCNT_EQ "%="
%token PERIOD "."
%token PLUS "+"
%token PLUS_EQ "+="
%token PLUS_PLUS "++"
%token QUEST "?"
%token RAQUO ">>"
%token RAQUO_EQ ">>="
%token RARR "->"
%token RCUB "}"
%token RPAR ")"
%token RSQB "]"
%token SEMI ";"
%token SOL "/"
%token SOL_EQ "/="
%token TILDE "~"
%token VERT "|"
%token VERT_EQ "|="
%token VERT_VERT "||"

%token <std::string> IDENTIFIER TYPEDEF_NAME INTEGER_CONSTANT FLOATING_CONSTANT ENUMERATION_CONSTANT CHARACTER_CONSTANT STRING_LITERAL
%token END_OF_FILE 0

%type <ptree> constant enumeration-constant primary-expression generic-selection generic-assoc-list generic-association postfix-expression argument-expression-list unary-expression unary-operator cast-expression multiplicative-expression additive-expression shift-expression relational-expression equality-expression AND-expression exclusive-OR-expression inclusive-OR-expression logical-AND-expression logical-OR-expression conditional-expression assignment-expression assignment-operator expression constant-expression declaration declaration-specifiers init-declarator-list init-declarator storage-class-specifier type-specifier struct-or-union-specifier struct-or-union struct-declaration-list struct-declaration specifier-qualifier-list struct-declarator-list struct-declarator enum-specifier enumerator-list enumerator atomic-type-specifier type-qualifier function-specifier alignment-specifier declarator direct-declarator pointer type-qualifier-list parameter-type-list parameter-list parameter-declaration identifier-list type-name abstract-declarator direct-abstract-declarator initializer initializer-list designation designation-list designator static-assert-declaration statement labeled-statement compound-statement block-item-list block-item expression-statement selection-statement iteration-statement jump-statement translation-unit external-declaration function-definition declaration-list

%start translation-unit

%%

constant
: INTEGER_CONSTANT
  {
    $$.add("integer-constant", $1);
  }
| FLOATING_CONSTANT
  {
    $$.add("floating-constant", $1);
  }
| ENUMERATION_CONSTANT
  {
    $$.add("enumeration-constant", $1);
  }
| CHARACTER_CONSTANT
  {
    $$.add("character-constant", $1);
  }
;

enumeration-constant
: IDENTIFIER
  {
    $$.add("identifier", $1);
    add_enumeration_constant(std::move($1));
  }
;

primary-expression
: IDENTIFIER
  {
    $$.add("identifier", $1);
  }
| constant
  {
    $$.add_child("constant", $1);
  }
| STRING_LITERAL
  {
    $$.add("string-literal", $1);
  }
| LPAR expression RPAR
  {
    $$.add("punctuator", "(");
    $$.add_child("expression", $2);
    $$.add("punctuator", ")");
  }
| generic-selection
  {
    $$.add_child("generic-selection", $1);
  }
;

generic-selection
: GENERIC LPAR assignment-expression COMMA generic-assoc-list RPAR
  {
    $$.add("keyword", "_Generic");
    $$.add("punctuator", "(");
    $$.add_child("assignment-expression", $3);
    $$.add("punctuator", ",");
    $$.add_child("generic-assoc-list", $5);
    $$.add("punctuator", ")");
  }
;

generic-assoc-list
: generic-association
  {
    $$.add_child("generic-association", $1);
  }
| generic-assoc-list COMMA generic-association
  {
    $$.add_child("generic-assoc-list", $1);
    $$.add("punctuator", ",");
    $$.add_child("generic-association", $3);
  }
;

generic-association
: type-name COLON assignment-expression
  {
    $$.add_child("type-name", $1);
    $$.add("punctuator", ":");
    $$.add_child("assignment-expression", $3);
  }
| DEFAULT COLON assignment-expression
  {
    $$.add("keyword", "default");
    $$.add("punctuator", ":");
    $$.add_child("assignment-expression", $3);
  }
;

postfix-expression
: primary-expression
  {
    $$.add_child("primary-expression", $1);
  }
| postfix-expression LSQB expression RSQB
  {
    $$.add_child("postfix-expression", $1);
    $$.add("punctuator", "[");
    $$.add_child("expression", $3);
    $$.add("punctuator", "]");
  }
| postfix-expression LPAR RPAR
  {
    $$.add_child("postfix-expression", $1);
    $$.add("punctuator", "(");
    $$.add("punctuator", ")");
  }
| postfix-expression LPAR argument-expression-list RPAR
  {
    $$.add_child("postfix-expression", $1);
    $$.add("punctuator", "(");
    $$.add_child("argument-expression-list", $3);
    $$.add("punctuator", ")");
  }
| postfix-expression PERIOD IDENTIFIER
  {
    $$.add_child("postfix-expression", $1);
    $$.add("punctuator", ".");
    $$.add("identifier", $3);
  }
| postfix-expression RARR IDENTIFIER
  {
    $$.add_child("postfix-expression", $1);
    $$.add("punctuator", "->");
    $$.add("identifier", $3);
  }
| postfix-expression PLUS_PLUS
  {
    $$.add_child("postfix-expression", $1);
    $$.add("punctuator", "++");
  }
| postfix-expression MINUS_MINUS
  {
    $$.add_child("postfix-expression", $1);
    $$.add("punctuator", "--");
  }
| LPAR type-name RPAR LCUB initializer-list RCUB
  {
    $$.add("punctuator", "(");
    $$.add_child("type-name", $2);
    $$.add("punctuator", ")");
    $$.add("punctuator", "{");
    $$.add_child("initializer-list", $5);
    $$.add("punctuator", "}");
  }
| LPAR type-name RPAR LCUB initializer-list COMMA RCUB
  {
    $$.add("punctuator", "(");
    $$.add_child("type-name", $2);
    $$.add("punctuator", ")");
    $$.add("punctuator", "{");
    $$.add_child("initializer-list", $5);
    $$.add("punctuator", ",");
    $$.add("punctuator", "}");
  }
;

argument-expression-list
: assignment-expression
  {
    $$.add_child("assignment-expression", $1);
  }
| argument-expression-list COMMA assignment-expression
  {
    $$.add_child("argument-expression-list", $1);
    $$.add("punctuator", ",");
    $$.add_child("assignment-expression", $3);
  }
;

unary-expression
: postfix-expression
  {
    $$.add_child("postfix-expression", $1);
  }
| PLUS_PLUS unary-expression
  {
    $$.add("punctuator", "++");
    $$.add_child("unary-expression", $2);
  }
| MINUS_MINUS unary-expression
  {
    $$.add("punctuator", "--");
    $$.add_child("unary-expression", $2);
  }
| unary-operator cast-expression
  {
    $$.add_child("unary-operator", $1);
    $$.add_child("cast-expression", $2);
  }
| SIZEOF unary-expression
  {
    $$.add("keyword", "sizeof");
    $$.add_child("unary-expression", $2);
  }
| SIZEOF LPAR type-name RPAR
  {
    $$.add("keyword", "sizeof");
    $$.add("punctuator", "(");
    $$.add_child("type-name", $3);
    $$.add("punctuator", ")");
  }
| ALIGNOF LPAR type-name RPAR
  {
    $$.add("keyword", "_Alignof");
    $$.add("punctuator", "(");
    $$.add_child("type-name", $3);
    $$.add("punctuator", ")");
  }
;

unary-operator
: AMP
  {
    $$.add("punctuator", "&");
  }
| AST
  {
    $$.add("punctuator", "*");
  }
| PLUS
  {
    $$.add("punctuator", "+");
  }
| MINUS
  {
    $$.add("punctuator", "-");
  }
| TILDE
  {
    $$.add("punctuator", "~");
  }
| EXCL
  {
    $$.add("punctuator", "!");
  }
;

cast-expression
: unary-expression
  {
    $$.add_child("unary-expression", $1);
  }
| LPAR type-name RPAR cast-expression
  {
    $$.add("punctuator", "(");
    $$.add_child("type-name", $2);
    $$.add("punctuator", ")");
    $$.add_child("cast-expression", $4);
  }
;

multiplicative-expression
: cast-expression
  {
    $$.add_child("cast-expression", $1);
  }
| multiplicative-expression AST cast-expression
  {
    $$.add_child("multiplicative-expression", $1);
    $$.add("punctuator", "*");
    $$.add_child("cast-expression", $3);
  }
| multiplicative-expression SOL cast-expression
  {
    $$.add_child("multiplicative-expression", $1);
    $$.add("punctuator", "/");
    $$.add_child("cast-expression", $3);
  }
| multiplicative-expression PERCNT cast-expression
  {
    $$.add_child("multiplicative-expression", $1);
    $$.add("punctuator", "%");
    $$.add_child("cast-expression", $3);
  }
;

additive-expression
: multiplicative-expression
  {
    $$.add_child("multiplicative-expression", $1);
  }
| additive-expression PLUS multiplicative-expression
  {
    $$.add_child("additive-expression", $1);
    $$.add("punctuator", "+");
    $$.add_child("multiplicative-expression", $3);
  }
| additive-expression MINUS multiplicative-expression
  {
    $$.add_child("additive-expression", $1);
    $$.add("punctuator", "-");
    $$.add_child("multiplicative-expression", $3);
  }
;

shift-expression
: additive-expression
  {
    $$.add_child("additive-expression", $1);
  }
| shift-expression LAQUO additive-expression
  {
    $$.add_child("shift-expression", $1);
    $$.add("punctuator", "<<");
    $$.add_child("additive-expression", $3);
  }
| shift-expression RAQUO additive-expression
  {
    $$.add_child("shift-expression", $1);
    $$.add("punctuator", ">>");
    $$.add_child("additive-expression", $3);
  }
;

relational-expression
: shift-expression
  {
    $$.add_child("shift-expression", $1);
  }
| relational-expression LT shift-expression
  {
    $$.add_child("relational-expression", $1);
    $$.add("punctuator", "<");
    $$.add_child("shift-expression", $3);
  }
| relational-expression GT shift-expression
  {
    $$.add_child("relational-expression", $1);
    $$.add("punctuator", ">");
    $$.add_child("shift-expression", $3);
  }
| relational-expression LT_EQ shift-expression
  {
    $$.add_child("relational-expression", $1);
    $$.add("punctuator", "<=");
    $$.add_child("shift-expression", $3);
  }
| relational-expression GT_EQ shift-expression
  {
    $$.add_child("relational-expression", $1);
    $$.add("punctuator", ">=");
    $$.add_child("shift-expression", $3);
  }
;

equality-expression
: relational-expression
  {
    $$.add_child("relational-expression", $1);
  }
| equality-expression EQ_EQ relational-expression
  {
    $$.add_child("equality-expression", $1);
    $$.add("punctuator", "==");
    $$.add_child("relational-expression", $3);
  }
| equality-expression EXCL_EQ relational-expression
  {
    $$.add_child("equality-expression", $1);
    $$.add("punctuator", "!=");
    $$.add_child("relational-expression", $3);
  }
;

AND-expression
: equality-expression
  {
    $$.add_child("equality-expression", $1);
  }
| AND-expression AMP equality-expression
  {
    $$.add_child("AND-expression", $1);
    $$.add("punctuator", "&");
    $$.add_child("equality-expression", $3);
  }
;

exclusive-OR-expression
: AND-expression
  {
    $$.add_child("AND-expression", $1);
  }
| exclusive-OR-expression HAT AND-expression
  {
    $$.add_child("exclusive-OR-expression", $1);
    $$.add("punctuator", "^");
    $$.add_child("AND-expression", $3);
  }
;

inclusive-OR-expression
: exclusive-OR-expression
  {
    $$.add_child("exclusive-OR-expression", $1);
  }
| inclusive-OR-expression VERT exclusive-OR-expression
  {
    $$.add_child("inclusive-OR-expression", $1);
    $$.add("punctuator", "|");
    $$.add_child("exclusive-OR-expression", $3);
  }
;

logical-AND-expression
: inclusive-OR-expression
  {
    $$.add_child("inclusive-OR-expression", $1);
  }
| logical-AND-expression AMP_AMP inclusive-OR-expression
  {
    $$.add_child("logical-AND-expression", $1);
    $$.add("punctuator", "&&");
    $$.add_child("inclusive-OR-expression", $3);
  }
;

logical-OR-expression
: logical-AND-expression
  {
    $$.add_child("logical-AND-expression", $1);
  }
| logical-OR-expression VERT_VERT logical-AND-expression
  {
    $$.add_child("logical-OR-expression", $1);
    $$.add("punctuator", "||");
    $$.add_child("logical-AND-expression", $3);
  }
;

conditional-expression
: logical-OR-expression
  {
    $$.add_child("logical-OR-expression", $1);
  }
| logical-OR-expression QUEST expression COLON conditional-expression
  {
    $$.add_child("logical-OR-expression", $1);
    $$.add("punctuator", "?");
    $$.add_child("expression", $3);
    $$.add("punctuator", ":");
    $$.add_child("conditional-expression", $5);
  }
;

assignment-expression
: conditional-expression
  {
    $$.add_child("conditional-expression", $1);
  }
| unary-expression assignment-operator assignment-expression
  {
    $$.add_child("unary-expression", $1);
    $$.add_child("assignment-operator", $2);
    $$.add_child("assignment-expression", $3);
  }
;

assignment-operator
: EQ
  {
    $$.add("punctuator", "=");
  }
| AST_EQ
  {
    $$.add("punctuator", "*=");
  }
| SOL_EQ
  {
    $$.add("punctuator", "/=");
  }
| PERCNT_EQ
  {
    $$.add("punctuator", "%=");
  }
| PLUS_EQ
  {
    $$.add("punctuator", "+=");
  }
| MINUS_EQ
  {
    $$.add("punctuator", "-=");
  }
| LAQUO_EQ
  {
    $$.add("punctuator", "<<=");
  }
| RAQUO_EQ
  {
    $$.add("punctuator", ">>=");
  }
| AMP_EQ
  {
    $$.add("punctuator", "&=");
  }
| HAT_EQ
  {
    $$.add("punctuator", "^=");
  }
| VERT_EQ
  {
    $$.add("punctuator", "|=");
  }
;

expression
: assignment-expression
  {
    $$.add_child("assignment-expression", $1);
  }
| expression COMMA assignment-expression
  {
    $$.add_child("expression", $1);
    $$.add("punctuator", ",");
    $$.add_child("assignment-expression", $3);
  }
;

constant-expression
: conditional-expression
  {
    $$.add_child("conditional-expression", $1);
  }
;

declaration
: declaration-specifiers SEMI
  {
    $$.add_child("declaration-specifiers", $1);
    $$.add("punctuator", ";");
  }
| declaration-specifiers init-declarator-list SEMI
  {
    $$.add_child("declaration-specifiers", $1);
    $$.add_child("init-declarator-list", $2);
    $$.add("punctuator", ";");

    // Do the lexer hack
    if ($1.get<std::string>("storage-class-specifier.keyword") == "typedef") {
      add_typedef_names($2);
    }
  }
| static-assert-declaration
  {
    $$.add_child("static-assert-declaration", $1);
  }
;

declaration-specifiers
: storage-class-specifier
  {
    $$.add_child("storage-class-specifier", $1);
  }
| storage-class-specifier declaration-specifiers
  {
    $$.add_child("storage-class-specifier", $1);
    $$.add_child("declaration-specifiers", $2);
  }
| type-specifier
  {
    $$.add_child("type-specifier", $1);
  }
| type-specifier declaration-specifiers
  {
    $$.add_child("type-specifier", $1);
    $$.add_child("declaration-specifiers", $2);
  }
| type-qualifier
  {
    $$.add_child("type-qualifier", $1);
  }
| type-qualifier declaration-specifiers
  {
    $$.add_child("type-qualifier", $1);
    $$.add_child("declaration-specifiers", $2);
  }
| function-specifier
  {
    $$.add_child("function-specifier", $1);
  }
| function-specifier declaration-specifiers
  {
    $$.add_child("function-specifier", $1);
    $$.add_child("declaration-specifiers", $2);
  }
| alignment-specifier
  {
    $$.add_child("alignment-specifier", $1);
  }
| alignment-specifier declaration-specifiers
  {
    $$.add_child("alignment-specifier", $1);
    $$.add_child("declaration-specifiers", $2);
  }
;

init-declarator-list
: init-declarator
  {
    $$.add_child("init-declarator", $1);
  }
| init-declarator-list COMMA init-declarator
  {
    $$.add_child("init-declarator-list", $1);
    $$.add("punctuator", ",");
    $$.add_child("init-declarator", $3);
  }
;

init-declarator
: declarator
  {
    $$.add_child("declarator", $1);
  }
| declarator EQ initializer
  {
    $$.add_child("declarator", $1);
    $$.add("punctuator", "=");
    $$.add_child("initializer", $3);
  }
;

storage-class-specifier
: TYPEDEF
  {
    $$.add("keyword", "typedef");
  }
| EXTERN
  {
    $$.add("keyword", "extern");
  }
| STATIC
  {
    $$.add("keyword", "static");
  }
| THREAD_LOCAL
  {
    $$.add("keyword", "_Thread_local");
  }
| AUTO
  {
    $$.add("keyword", "auto");
  }
| REGISTER
  {
    $$.add("keyword", "register");
  }
;

type-specifier
: VOID
  {
    $$.add("keyword", "void");
  }
| CHAR
  {
    $$.add("keyword", "char");
  }
| SHORT
  {
    $$.add("keyword", "short");
  }
| INT
  {
    $$.add("keyword", "int");
  }
| LONG
  {
    $$.add("keyword", "long");
  }
| FLOAT
  {
    $$.add("keyword", "float");
  }
| DOUBLE
  {
    $$.add("keyword", "double");
  }
| SIGNED
  {
    $$.add("keyword", "signed");
  }
| UNSIGNED
  {
    $$.add("keyword", "unsigned");
  }
| BOOL
  {
    $$.add("keyword", "_Bool");
  }
| COMPLEX
  {
    $$.add("keyword", "_Complex");
  }
| atomic-type-specifier
  {
    $$.add_child("atomic-type-specifier", $1);
  }
| struct-or-union-specifier
  {
    $$.add_child("struct-or-union-specifier", $1);
  }
| enum-specifier
  {
    $$.add_child("enum-specifier", $1);
  }
| TYPEDEF_NAME
  {
    $$.add("typedef-name", $1);
  }
;

struct-or-union-specifier
: struct-or-union LCUB struct-declaration-list RCUB
  {
    $$.add_child("struct-or-union", $1);
    $$.add("punctuator", "{");
    $$.add_child("struct-declaration-list", $3);
    $$.add("punctuator", "}");
  }
| struct-or-union IDENTIFIER LCUB struct-declaration-list RCUB
  {
    $$.add_child("struct-or-union", $1);
    $$.add("identifier", $2);
    $$.add("punctuator", "{");
    $$.add_child("struct-declaration-list", $4);
    $$.add("punctuator", "}");
  }
| struct-or-union IDENTIFIER
  {
    $$.add_child("struct-or-union", $1);
    $$.add("identifier", $2);
  }
;

struct-or-union
: STRUCT
  {
    $$.add("keyword", "struct");
  }
| UNION
  {
    $$.add("keyword", "union");
  }
;

struct-declaration-list
: struct-declaration
  {
    $$.add_child("struct-declaration", $1);
  }
| struct-declaration-list struct-declaration
  {
    $$.add_child("struct-declaration-list", $1);
    $$.add_child("struct-declaration", $2);
  }
;

struct-declaration
: specifier-qualifier-list SEMI
  {
    $$.add_child("specifier-qualifier-list", $1);
    $$.add("punctuator", ";");
  }
| specifier-qualifier-list struct-declarator-list SEMI
  {
    $$.add_child("specifier-qualifier-list", $1);
    $$.add_child("struct-declarator-list", $2);
    $$.add("punctuator", ";");
  }
| static-assert-declaration
  {
    $$.add_child("static-assert-declaration", $1);
  }
;

specifier-qualifier-list
: type-specifier
  {
    $$.add_child("type-specifier", $1);
  }
| type-specifier specifier-qualifier-list
  {
    $$.add_child("type-specifier", $1);
    $$.add_child("specifier-qualifier-list", $2);
  }
| type-qualifier
  {
    $$.add_child("type-qualifier", $1);
  }
| type-qualifier specifier-qualifier-list
  {
    $$.add_child("type-qualifier", $1);
    $$.add_child("specifier-qualifier-list", $2);
  }
| alignment-specifier
  {
    $$.add_child("alignment-specifier", $1);
  }
| alignment-specifier specifier-qualifier-list
  {
    $$.add_child("alignment-specifier", $1);
    $$.add_child("specifier-qualifier-list", $2);
  }
;

struct-declarator-list
: struct-declarator
  {
    $$.add_child("struct-declarator", $1);
  }
| struct-declarator-list COMMA struct-declarator
  {
    $$.add_child("struct-declarator-list", $1);
    $$.add("punctuator", ",");
    $$.add_child("struct-declarator", $3);
  }
;

struct-declarator
: declarator
  {
    $$.add_child("declarator", $1);
  }
| COLON constant-expression
  {
    $$.add("punctuator", ":");
    $$.add_child("constant-expression", $2);
  }
| declarator COLON constant-expression
  {
    $$.add_child("declarator", $1);
    $$.add("punctuator", ":");
    $$.add_child("constant-expression", $3);
  }
;

enum-specifier
: ENUM LCUB enumerator-list RCUB
  {
    $$.add("keyword", "enum");
    $$.add("punctuator", "{");
    $$.add_child("enumerator-list", $3);
    $$.add("punctuator", "}");
  }
| ENUM IDENTIFIER LCUB enumerator-list RCUB
  {
    $$.add("keyword", "enum");
    $$.add("identifier", $2);
    $$.add("punctuator", "{");
    $$.add_child("enumerator-list", $4);
    $$.add("punctuator", "}");
  }
| ENUM LCUB enumerator-list COMMA RCUB
  {
    $$.add("keyword", "enum");
    $$.add("punctuator", "{");
    $$.add_child("enumerator-list", $3);
    $$.add("punctuator", ",");
    $$.add("punctuator", "}");
  }
| ENUM IDENTIFIER LCUB enumerator-list COMMA RCUB
  {
    $$.add("keyword", "enum");
    $$.add("identifier", $2);
    $$.add("punctuator", "{");
    $$.add_child("enumerator-list", $4);
    $$.add("punctuator", ",");
    $$.add("punctuator", "}");
  }
| ENUM IDENTIFIER
  {
    $$.add("keyword", "enum");
    $$.add("identifier", $2);
  }
;

enumerator-list
: enumerator
  {
    $$.add_child("enumerator", $1);
  }
| enumerator-list COMMA enumerator
  {
    $$.add_child("enumerator-list", $1);
    $$.add("punctuator", ",");
    $$.add_child("enumerator", $3);
  }
;

enumerator
: enumeration-constant
  {
    $$.add_child("enumeration-constant", $1);
  }
| enumeration-constant EQ constant-expression
  {
    $$.add_child("enumeration-constant", $1);
    $$.add("punctuator", "=");
    $$.add_child("constant-expression", $3);
  }
;

/* NOTE: following two rules make grammar ambiguous.
 * See https://stackoverflow.com/questions/10668941/c11-grammar-ambiguity-between-atomic-type-specifier-and-qualifier
 */

atomic-type-specifier
: ATOMIC LPAR type-name RPAR
  {
    $$.add("keyword", "_Atomic");
    $$.add("punctuator", "(");
    $$.add_child("type-name", $3);
    $$.add("punctuator", ")");
  }
;

type-qualifier
: CONST
  {
    $$.add("keyword", "const");
  }
| RESTRICT
  {
    $$.add("keyword", "restrict");
  }
| VOLATILE
  {
    $$.add("keyword", "volatile");
  }
| ATOMIC
  {
    $$.add("keyword", "_Atomic");
  }
;

function-specifier
: INLINE
  {
    $$.add("keyword", "inline");
  }
| NORETURN
  {
    $$.add("keyword", "_Noreturn");
  }
;

alignment-specifier
: ALIGNAS LPAR type-name RPAR
  {
    $$.add("keyword", "_Alignas");
    $$.add("punctuator", "(");
    $$.add_child("type-name", $3);
    $$.add("punctuator", ")");
  }
| ALIGNAS LPAR constant-expression RPAR
  {
    $$.add("keyword", "_Alignas");
    $$.add("punctuator", "(");
    $$.add_child("constant-expression", $3);
    $$.add("punctuator", ")");
  }
;

declarator
: direct-declarator
  {
    $$.add_child("direct-declarator", $1);
  }
| pointer direct-declarator
  {
    $$.add_child("pointer", $1);
    $$.add_child("direct-declarator", $2);
  }
;

direct-declarator
: IDENTIFIER
  {
    $$.add("identifier", $1);
  }
| LPAR declarator RPAR
  {
    $$.add("punctuator", "(");
    $$.add_child("declarator", $2);
    $$.add("punctuator", ")");
  }
| direct-declarator LSQB RSQB
  {
    $$.add_child("direct-declarator", $1);
    $$.add("punctuator", "[");
    $$.add("punctuator", "]");
  }
| direct-declarator LSQB type-qualifier-list RSQB
  {
    $$.add_child("direct-declarator", $1);
    $$.add("punctuator", "[");
    $$.add_child("type-qualifier-list", $3);
    $$.add("punctuator", "]");
  }
| direct-declarator LSQB assignment-expression RSQB
  {
    $$.add_child("direct-declarator", $1);
    $$.add("punctuator", "[");
    $$.add_child("assignment-expression", $3);
    $$.add("punctuator", "]");
  }
| direct-declarator LSQB type-qualifier-list assignment-expression RSQB
  {
    $$.add_child("direct-declarator", $1);
    $$.add("punctuator", "[");
    $$.add_child("type-qualifier-list", $3);
    $$.add_child("assignment-expression", $4);
    $$.add("punctuator", "]");
  }
| direct-declarator LSQB STATIC assignment-expression RSQB
  {
    $$.add_child("direct-declarator", $1);
    $$.add("punctuator", "[");
    $$.add("keyword", "static");
    $$.add_child("assignment-expression", $4);
    $$.add("punctuator", "]");
  }
| direct-declarator LSQB STATIC type-qualifier-list assignment-expression RSQB
  {
    $$.add_child("direct-declarator", $1);
    $$.add("punctuator", "[");
    $$.add("keyword", "static");
    $$.add_child("type-qualifier-list", $4);
    $$.add_child("assignment-expression", $5);
    $$.add("punctuator", "]");
  }
| direct-declarator LSQB type-qualifier-list STATIC assignment-expression RSQB
  {
    $$.add_child("direct-declarator", $1);
    $$.add("punctuator", "[");
    $$.add_child("type-qualifier-list", $3);
    $$.add("keyword", "static");
    $$.add_child("assignment-expression", $5);
    $$.add("punctuator", "]");
  }
| direct-declarator LSQB AST RSQB
  {
    $$.add_child("direct-declarator", $1);
    $$.add("punctuator", "[");
    $$.add("punctuator", "*");
    $$.add("punctuator", "]");
  }
| direct-declarator LSQB type-qualifier-list AST RSQB
  {
    $$.add_child("direct-declarator", $1);
    $$.add("punctuator", "[");
    $$.add_child("type-qualifier-list", $3);
    $$.add("punctuator", "*");
    $$.add("punctuator", "]");
  }
| direct-declarator LPAR parameter-type-list RPAR
  {
    $$.add_child("direct-declarator", $1);
    $$.add("punctuator", "(");
    $$.add_child("parameter-type-list", $3);
    $$.add("punctuator", ")");
  }
| direct-declarator LPAR RPAR
  {
    $$.add_child("direct-declarator", $1);
    $$.add("punctuator", "(");
    $$.add("punctuator", ")");
  }
| direct-declarator LPAR identifier-list RPAR
  {
    $$.add_child("direct-declarator", $1);
    $$.add("punctuator", "(");
    $$.add_child("identifier-list", $3);
    $$.add("punctuator", ")");
  }
;

pointer
: AST
  {
    $$.add("punctuator", "*");
  }
| AST type-qualifier-list
  {
    $$.add("punctuator", "*");
    $$.add_child("type-qualifier-list", $2);
  }
| AST pointer
  {
    $$.add("punctuator", "*");
    $$.add_child("pointer", $2);
  }
| AST type-qualifier-list pointer
  {
    $$.add("punctuator", "*");
    $$.add_child("type-qualifier-list", $2);
    $$.add_child("pointer", $3);
  }
;

type-qualifier-list
: type-qualifier
  {
    $$.add_child("type-qualifier", $1);
  }
| type-qualifier-list type-qualifier
  {
    $$.add_child("type-qualifier-list", $1);
    $$.add_child("type-qualifier", $2);
  }
;

parameter-type-list
: parameter-list
  {
    $$.add_child("parameter-list", $1);
  }
| parameter-list COMMA HELLIP
  {
    $$.add_child("parameter-list", $1);
    $$.add("punctuator", ",");
    $$.add("punctuator", "...");
  }
;

parameter-list
: parameter-declaration
  {
    $$.add_child("parameter-declaration", $1);
  }
| parameter-list COMMA parameter-declaration
  {
    $$.add_child("parameter-list", $1);
    $$.add("punctuator", ",");
    $$.add_child("parameter-declaration", $3);
  }
;

parameter-declaration
: declaration-specifiers declarator
  {
    $$.add_child("declaration-specifiers", $1);
    $$.add_child("declarator", $2);
  }
| declaration-specifiers
  {
    $$.add_child("declaration-specifiers", $1);
  }
| declaration-specifiers abstract-declarator
  {
    $$.add_child("declaration-specifiers", $1);
    $$.add_child("abstract-declarator", $2);
  }
;

identifier-list
: IDENTIFIER
  {
    $$.add("identifier", $1);
  }
| identifier-list COMMA IDENTIFIER
  {
    $$.add_child("identifier-list", $1);
    $$.add("punctuator", ",");
    $$.add("identifier", $3);
  }
;

type-name
: specifier-qualifier-list
  {
    $$.add_child("specifier-qualifier-list", $1);
  }
| specifier-qualifier-list abstract-declarator
  {
    $$.add_child("specifier-qualifier-list", $1);
    $$.add_child("abstract-declarator", $2);
  }
;

abstract-declarator
: pointer
  {
    $$.add_child("pointer", $1);
  }
| direct-abstract-declarator
  {
    $$.add_child("direct-abstract-declarator", $1);
  }
| pointer direct-abstract-declarator
  {
    $$.add_child("pointer", $1);
    $$.add_child("direct-abstract-declarator", $2);
  }
;

direct-abstract-declarator
: LPAR abstract-declarator RPAR
  {
    $$.add("punctuator", "(");
    $$.add_child("abstract-declarator", $2);
    $$.add("punctuator", ")");
  }
| LSQB RSQB
  {
    $$.add("punctuator", "[");
    $$.add("punctuator", "]");
  }
| direct-abstract-declarator LSQB RSQB
  {
    $$.add_child("direct-abstract-declarator", $1);
    $$.add("punctuator", "[");
    $$.add("punctuator", "]");
  }
| LSQB type-qualifier-list RSQB
  {
    $$.add("punctuator", "[");
    $$.add_child("type-qualifier-list", $2);
    $$.add("punctuator", "]");
  }
| direct-abstract-declarator LSQB type-qualifier-list RSQB
  {
    $$.add_child("direct-abstract-declarator", $1);
    $$.add("punctuator", "[");
    $$.add_child("type-qualifier-list", $3);
    $$.add("punctuator", "]");
  }
| LSQB assignment-expression RSQB
  {
    $$.add("punctuator", "[");
    $$.add_child("assignment-expression", $2);
    $$.add("punctuator", "]");
  }
| direct-abstract-declarator LSQB assignment-expression RSQB
  {
    $$.add_child("direct-abstract-declarator", $1);
    $$.add("punctuator", "[");
    $$.add_child("assignment-expression", $3);
    $$.add("punctuator", "]");
  }
| LSQB type-qualifier-list assignment-expression RSQB
  {
    $$.add("punctuator", "[");
    $$.add_child("type-qualifier-list", $2);
    $$.add_child("assignment-expression", $3);
    $$.add("punctuator", "]");
  }
| direct-abstract-declarator LSQB type-qualifier-list assignment-expression RSQB
  {
    $$.add_child("direct-abstract-declarator", $1);
    $$.add("punctuator", "[");
    $$.add_child("type-qualifier-list", $3);
    $$.add_child("assignment-expression", $4);
    $$.add("punctuator", "]");
  }
| LSQB STATIC assignment-expression RSQB
  {
    $$.add("punctuator", "[");
    $$.add("keyword", "static");
    $$.add_child("assignment-expression", $3);
    $$.add("punctuator", "]");
  }
| direct-abstract-declarator LSQB STATIC assignment-expression RSQB
  {
    $$.add_child("direct-abstract-declarator", $1);
    $$.add("punctuator", "[");
    $$.add("keyword", "static");
    $$.add_child("assignment-expression", $4);
    $$.add("punctuator", "]");
  }
| LSQB STATIC type-qualifier-list assignment-expression RSQB
  {
    $$.add("punctuator", "[");
    $$.add("keyword", "static");
    $$.add_child("type-qualifier-list", $3);
    $$.add_child("assignment-expression", $4);
    $$.add("punctuator", "]");
  }
| direct-abstract-declarator LSQB STATIC type-qualifier-list assignment-expression RSQB
  {
    $$.add_child("direct-abstract-declarator", $1);
    $$.add("punctuator", "[");
    $$.add("keyword", "static");
    $$.add_child("type-qualifier-list", $4);
    $$.add_child("assignment-expression", $5);
    $$.add("punctuator", "]");
  }
| LSQB type-qualifier-list STATIC assignment-expression RSQB
  {
    $$.add("punctuator", "[");
    $$.add_child("type-qualifier-list", $2);
    $$.add("keyword", "static");
    $$.add_child("assignment-expression", $4);
    $$.add("punctuator", "]");
  }
| direct-abstract-declarator LSQB type-qualifier-list STATIC assignment-expression RSQB
  {
    $$.add_child("direct-abstract-declarator", $1);
    $$.add("punctuator", "[");
    $$.add_child("type-qualifier-list", $3);
    $$.add("keyword", "static");
    $$.add_child("assignment-expression", $5);
    $$.add("punctuator", "]");
  }
| LSQB AST RSQB
  {
    $$.add("punctuator", "[");
    $$.add("punctuator", "*");
    $$.add("punctuator", "]");
  }
| direct-abstract-declarator LSQB AST RSQB
  {
    $$.add_child("direct-abstract-declarator", $1);
    $$.add("punctuator", "[");
    $$.add("punctuator", "*");
    $$.add("punctuator", "]");
  }
| LPAR RPAR
  {
    $$.add("punctuator", "(");
    $$.add("punctuator", ")");
  }
| direct-abstract-declarator LPAR RPAR
  {
    $$.add_child("direct-abstract-declarator", $1);
    $$.add("punctuator", "(");
    $$.add("punctuator", ")");
  }
| LPAR parameter-type-list RPAR
  {
    $$.add("punctuator", "(");
    $$.add_child("parameter-type-list", $2);
    $$.add("punctuator", ")");
  }
| direct-abstract-declarator LPAR parameter-type-list RPAR
  {
    $$.add_child("direct-abstract-declarator", $1);
    $$.add("punctuator", "(");
    $$.add_child("parameter-type-list", $3);
    $$.add("punctuator", ")");
  }
;

initializer
: assignment-expression
  {
    $$.add_child("assignment-expression", $1);
  }
| LCUB initializer-list RCUB
  {
    $$.add("punctuator", "{");
    $$.add_child("initializer-list", $2);
    $$.add("punctuator", "}");
  }
| LCUB identifier-list COMMA RCUB
  {
    $$.add("punctuator", "{");
    $$.add_child("identifier-list", $2);
    $$.add("punctuator", ",");
    $$.add("punctuator", "}");
  }
;

initializer-list
: initializer
  {
    $$.add_child("initializer", $1);
  }
| designation initializer
  {
    $$.add_child("designation", $1);
    $$.add_child("initializer", $2);
  }
| initializer-list COMMA initializer
  {
    $$.add_child("initializer-list", $1);
    $$.add("punctuator", ",");
    $$.add_child("initializer", $3);
  }
| initializer-list COMMA designation initializer
  {
    $$.add_child("initializer-list", $1);
    $$.add("punctuator", ",");
    $$.add_child("designation", $3);
    $$.add_child("initializer", $4);
  }
;

designation
: designation-list EQ
  {
    $$.add_child("designation-list", $1);
    $$.add("punctuator", "=");
  }
;

designation-list
: designator
  {
    $$.add_child("designator", $1);
  }
| designation-list designator
  {
    $$.add_child("designation-list", $1);
    $$.add_child("designator", $2);
  }
;

designator
: LSQB constant-expression RSQB
  {
    $$.add("punctuator", "[");
    $$.add_child("constant-expression", $2);
    $$.add("punctuator", "]");
  }
| PERIOD IDENTIFIER
  {
    $$.add("punctuator", ".");
    $$.add("identifier", $2);
  }
;

static-assert-declaration
: STATIC_ASSERT LPAR constant-expression COMMA STRING_LITERAL RPAR SEMI
  {
    $$.add("keyword", "_Static_assert");
    $$.add("punctuator", "(");
    $$.add_child("constant-expression", $3);
    $$.add("punctuator", ",");
    $$.add("string-literal", $5);
    $$.add("punctuator", ")");
    $$.add("punctuator", ";");
  }
;

statement
: labeled-statement
  {
    $$.add_child("labeled-statement", $1);
  }
| compound-statement
  {
    $$.add_child("compound-statement", $1);
  }
| expression-statement
  {
    $$.add_child("expression-statement", $1);
  }
| selection-statement
  {
    $$.add_child("selection-statement", $1);
  }
| iteration-statement
  {
    $$.add_child("iteration-statement", $1);
  }
| jump-statement
  {
    $$.add_child("jump-statement", $1);
  }
;

labeled-statement
: IDENTIFIER COLON statement
  {
    $$.add("identifier", $1);
    $$.add("punctuator", ":");
    $$.add_child("statement", $3);
  }
| CASE constant-expression COLON statement
  {
    $$.add("keyword", "case");
    $$.add_child("constant-expression", $2);
    $$.add("punctuator", ":");
    $$.add_child("statement", $4);
  }
| DEFAULT COLON statement
  {
    $$.add("keyword", "default");
    $$.add("punctuator", ":");
    $$.add_child("statement", $3);
  }
;

compound-statement
: LCUB RCUB
  {
    $$.add("punctuator", "{");
    $$.add("punctuator", "}");
  }
| LCUB block-item-list RCUB
  {
    $$.add("punctuator", "{");
    $$.add_child("block-item-list", $2);
    $$.add("punctuator", "}");
  }
;

block-item-list
: block-item
  {
    $$.add_child("block-item", $1);
  }
| block-item-list block-item
  {
    $$.add_child("block-item-list", $1);
    $$.add_child("block-item", $2);
  }
;

block-item
: declaration
  {
    $$.add_child("declaration", $1);
  }
| statement
  {
    $$.add_child("statement", $1);
  }
;

expression-statement
: SEMI
  {
    $$.add("punctuator", ";");
  }
| expression SEMI
  {
    $$.add_child("expression", $1);
    $$.add("punctuator", ";");
  }
;

selection-statement
: IF LPAR expression RPAR statement
  {
    $$.add("keyword", "if");
    $$.add("punctuator", "(");
    $$.add_child("expression", $3);
    $$.add("punctuator", ")");
    $$.add_child("statement", $5);
  }
| IF LPAR expression RPAR statement ELSE statement
  {
    $$.add("keyword", "if");
    $$.add("punctuator", "(");
    $$.add_child("expression", $3);
    $$.add("punctuator", ")");
    $$.add_child("statement", $5);
    $$.add("keyword", "else");
    $$.add_child("statement", $7);
  }
| SWITCH LPAR expression RPAR statement
  {
    $$.add("keyword", "switch");
    $$.add("punctuator", "(");
    $$.add_child("expression", $3);
    $$.add("punctuator", ")");
    $$.add_child("statement", $5);
  }
;

iteration-statement
: WHILE LPAR expression RPAR statement
  {
    $$.add("keyword", "while");
    $$.add("punctuator", "(");
    $$.add_child("expression", $3);
    $$.add("punctuator", ")");
    $$.add_child("statement", $5);
  }
| DO statement WHILE LPAR expression RPAR SEMI
  {
    $$.add("keyword", "do");
    $$.add_child("statement", $2);
    $$.add("keyword", "while");
    $$.add("punctuator", "(");
    $$.add_child("expression", $5);
    $$.add("punctuator", ")");
    $$.add("punctuator", ";");
  }
| FOR LPAR SEMI SEMI RPAR statement
  {
    $$.add("keyword", "for");
    $$.add("punctuator", "(");
    $$.add("punctuator", ";");
    $$.add("punctuator", ";");
    $$.add("punctuator", ")");
    $$.add_child("statement", $6);
  }
| FOR LPAR expression SEMI SEMI RPAR statement
  {
    $$.add("keyword", "for");
    $$.add("punctuator", "(");
    $$.add_child("expression", $3);
    $$.add("punctuator", ";");
    $$.add("punctuator", ";");
    $$.add("punctuator", ")");
    $$.add_child("statement", $7);
  }
| FOR LPAR SEMI expression SEMI RPAR statement
  {
    $$.add("keyword", "for");
    $$.add("punctuator", "(");
    $$.add("punctuator", ";");
    $$.add_child("expression", $4);
    $$.add("punctuator", ";");
    $$.add("punctuator", ")");
    $$.add_child("statement", $7);
  }
| FOR LPAR SEMI SEMI expression RPAR statement
  {
    $$.add("keyword", "for");
    $$.add("punctuator", "(");
    $$.add("punctuator", ";");
    $$.add("punctuator", ";");
    $$.add_child("expression", $5);
    $$.add("punctuator", ")");
    $$.add_child("statement", $7);
  }
| FOR LPAR expression SEMI expression SEMI RPAR statement
  {
    $$.add("keyword", "for");
    $$.add("punctuator", "(");
    $$.add_child("expression", $3);
    $$.add("punctuator", ";");
    $$.add_child("expression", $5);
    $$.add("punctuator", ";");
    $$.add("punctuator", ")");
    $$.add_child("statement", $8);
  }
| FOR LPAR expression SEMI SEMI expression RPAR statement
  {
    $$.add("keyword", "for");
    $$.add("punctuator", "(");
    $$.add_child("expression", $3);
    $$.add("punctuator", ";");
    $$.add("punctuator", ";");
    $$.add_child("expression", $6);
    $$.add("punctuator", ")");
    $$.add_child("statement", $8);
  }
| FOR LPAR SEMI expression SEMI expression RPAR statement
  {
    $$.add("keyword", "for");
    $$.add("punctuator", "(");
    $$.add("punctuator", ";");
    $$.add_child("expression", $4);
    $$.add("punctuator", ";");
    $$.add_child("expression", $6);
    $$.add("punctuator", ")");
    $$.add_child("statement", $8);
  }
| FOR LPAR expression SEMI expression SEMI expression RPAR statement
  {
    $$.add("keyword", "for");
    $$.add("punctuator", "(");
    $$.add_child("expression", $3);
    $$.add("punctuator", ";");
    $$.add_child("expression", $5);
    $$.add("punctuator", ";");
    $$.add_child("expression", $7);
    $$.add("punctuator", ")");
    $$.add_child("statement", $9);
  }
| FOR LPAR declaration SEMI RPAR statement
  {
    $$.add("keyword", "for");
    $$.add("punctuator", "(");
    $$.add_child("declaration", $3);
    $$.add("punctuator", ";");
    $$.add("punctuator", ")");
    $$.add_child("statement", $6);
  }
| FOR LPAR declaration expression SEMI RPAR statement
  {
    $$.add("keyword", "for");
    $$.add("punctuator", "(");
    $$.add_child("declaration", $3);
    $$.add_child("expression", $4);
    $$.add("punctuator", ";");
    $$.add("punctuator", ")");
    $$.add_child("statement", $7);
  }
| FOR LPAR declaration SEMI expression RPAR statement
  {
    $$.add("keyword", "for");
    $$.add("punctuator", "(");
    $$.add_child("declaration", $3);
    $$.add("punctuator", ";");
    $$.add_child("expression", $5);
    $$.add("punctuator", ")");
    $$.add_child("statement", $7);
  }
| FOR LPAR declaration expression SEMI expression RPAR statement
  {
    $$.add("keyword", "for");
    $$.add("punctuator", "(");
    $$.add_child("declaration", $3);
    $$.add_child("expression", $4);
    $$.add("punctuator", ";");
    $$.add_child("expression", $6);
    $$.add("punctuator", ")");
    $$.add_child("statement", $8);
  }
;

jump-statement
: GOTO IDENTIFIER SEMI
  {
    $$.add("keyword", "goto");
    $$.add("identifier", $2);
    $$.add("punctuator", ";");
  }
| CONTINUE SEMI
  {
    $$.add("keyword", "continue");
    $$.add("punctuator", ";");
  }
| BREAK SEMI
  {
    $$.add("keyword", "break");
    $$.add("punctuator", ";");
  }
| RETURN SEMI
  {
    $$.add("keyword", "return");
    $$.add("punctuator", ";");
  }
| RETURN expression SEMI
  {
    $$.add("keyword", "return");
    $$.add_child("expression", $2);
    $$.add("punctuator", ";");
  }
;

translation-unit
: external-declaration
  {
    $$.add_child("external-declaration", $1);
    result = ptree();
    result.add_child("translation-unit", $$);
  }
| translation-unit external-declaration
  {
    $$.add_child("translation-unit", $1);
    $$.add_child("external-declaration", $2);
    result = ptree();
    result.add_child("translation-unit", $$);
  }
;

external-declaration
: function-definition
  {
    $$.add_child("function-definition", $1);
  }
| declaration
  {
    $$.add_child("declaration", $1);
  }
;

function-definition
: declaration-specifiers declarator compound-statement
  {
    $$.add_child("declaration-specifiers", $1);
    $$.add_child("declarator", $2);
    $$.add_child("compound-statement", $3);
  }
| declaration-specifiers declarator declaration-list compound-statement
  {
    $$.add_child("declaration-specifiers", $1);
    $$.add_child("declarator", $2);
    $$.add_child("declaration-list", $3);
    $$.add_child("compound-statement", $4);
  }
;

declaration-list
: declaration
  {
    $$.add_child("declaration", $1);
  }
| declaration-list declaration
  {
    $$.add_child("declaration-list", $1);
    $$.add_child("declaration", $2);
  }
;

%%

auto yy::parser::error(parser::location_type const &location,
                       std::string const &msg) -> void {
  std::cerr << location << ": " << msg << std::endl;
}

static auto add_typedef_names_init_declarator_list(ptree const&) -> void;
static auto add_typedef_names_init_declarator(ptree const&) -> void;
static auto add_typedef_names_declarator(ptree const&) -> void;
static auto add_typedef_names_direct_declarator(ptree const&) -> void;

auto add_typedef_names(ptree const& init_declarator_list) -> void {
  add_typedef_names_init_declarator_list(init_declarator_list);
}

auto add_typedef_names_init_declarator_list(ptree const& init_declarator_list) -> void {
  if (auto const x = init_declarator_list.get_child_optional("init-declarator-list")) {
    add_typedef_names_init_declarator_list(*x);
  }
  add_typedef_names_init_declarator(init_declarator_list.get_child("init-declarator"));
}

static auto add_typedef_names_init_declarator(ptree const& init_declarator) -> void {
  add_typedef_names_declarator(init_declarator.get_child("declarator"));
}

static auto add_typedef_names_declarator(ptree const& declarator) -> void {
  add_typedef_names_direct_declarator(declarator.get_child("direct-declarator"));
}

static auto add_typedef_names_direct_declarator(ptree const& direct_declarator) -> void {
  if (auto const x = direct_declarator.get_child_optional("identifier")) {
    add_typedef_name(x->get_value<std::string>());
  } else if (auto const x = direct_declarator.get_child_optional("declarator")) {
    add_typedef_names_declarator(*x);
  } else if (auto const x = direct_declarator.get_child_optional("direct-declarator")) {
    add_typedef_names_direct_declarator(*x);
  }
}

/* vim: set ft=yacc ts=2 sw=2 et: */
