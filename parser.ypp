%code {
/* Unqualified "%code" block which will be emitted into .cpp */
}

%code requires {
/* "%code requires" block for dependency codes of YYSTYPE and YYLTYPE */
}

%code provides {
/* "%code provides" block for declarations in other object files */
#include "lexer.hpp"
}

%define api.token.constructor
%define api.value.type variant
%define parse.assert
%define parse.error verbose
%define parse.trace
%language "c++"
%locations
%require "3.2"

%token AUTO BREAK CASE CHAR CONST CONTINUE DEFAULT DO DOUBLE ELSE ENUM EXTERN FLOAT FOR GOTO IF INLINE INT LONG REGISTER RESTRICT RETURN SHORT SIGNED SIZEOF STATIC STRUCT SWITCH TYPEDEF UNION UNSIGNED VOID VOLATILE WHILE ALIGNAS ALIGNOF ATOMIC BOOL COMPLEX GENERIC IMAGINARY NORETURN STATIC_ASSERT THREAD_LOCAL
%token HELLIP LAQUO_EQ RAQUO_EQ EXCL_EQ LT_EQ EQ_EQ GT_EQ PERCNT_EQ AST_EQ PLUS_EQ MINUS_EQ SOL_EQ AMP_AMP VERT_VERT AMP_EQ HAT_EQ VERT_EQ PLUS_PLUS MINUS_MINUS RARR LAQUO RAQUO
%token EXCL PERCNT AMP LPAR RPAR AST PLUS COMMA MINUS PERIOD SOL COLON SEMI LT EQ GT QUEST LSQB RSQB HAT LCUB VERT RCUB TILDE
%token <std::string> INTEGER_CONSTANT FLOATING_CONSTANT CHARACTER_CONSTANT
%token <std::string> IDENTIFIER ENUMERATION_CONSTANT TYPEDEF_NAME STRING_LITERAL
%token END_OF_FILE 0

%start translation_unit

%%

constant: INTEGER_CONSTANT
        | FLOATING_CONSTANT
        | ENUMERATION_CONSTANT
        | CHARACTER_CONSTANT
        ;

enumeration_constant: IDENTIFIER  { add_enumeration_constant($1); }
                    ;

primary_expression: IDENTIFIER
                  | constant
                  | STRING_LITERAL
                  | LPAR expression RPAR
                  | generic_selection
                  ;

generic_selection: GENERIC LPAR assignment_expression COMMA generic_assoc_list RPAR
                 ;

generic_assoc_list: generic_association
                  | generic_assoc_list COMMA generic_association
                  ;

generic_association: type_name COLON assignment_expression
                   | DEFAULT COLON assignment_expression
                   ;

postfix_expression: primary_expression
                  | postfix_expression LSQB expression RSQB
                  | postfix_expression LPAR RPAR
                  | postfix_expression LPAR argument_expression_list RPAR
                  | postfix_expression PERIOD IDENTIFIER
                  | postfix_expression RARR IDENTIFIER
                  | postfix_expression PLUS_PLUS
                  | postfix_expression MINUS_MINUS
                  | LPAR type_name RPAR LCUB initializer_list RCUB
                  | LPAR type_name RPAR LCUB initializer_list COMMA RCUB
                  ;

argument_expression_list: assignment_expression
                        | argument_expression_list COMMA assignment_expression
                        ;

unary_expression: postfix_expression
                | PLUS_PLUS unary_expression
                | MINUS_MINUS unary_expression
                | unary_operator cast_expression
                | SIZEOF unary_expression
                | SIZEOF LPAR type_name RPAR
                | ALIGNOF LPAR type_name RPAR
                ;

unary_operator: AMP | AST | PLUS | MINUS | TILDE | EXCL ;

cast_expression: unary_expression
               | LPAR type_name RPAR cast_expression
               ;

multiplicative_expression: cast_expression
                         | multiplicative_expression AST cast_expression
                         | multiplicative_expression SOL cast_expression
                         | multiplicative_expression PERCNT cast_expression
                         ;

additive_expression: multiplicative_expression
                   | additive_expression PLUS multiplicative_expression
                   | additive_expression MINUS multiplicative_expression
                   ;

shift_expression: additive_expression
                | shift_expression LAQUO additive_expression
                | shift_expression RAQUO additive_expression
                ;

relational_expression: shift_expression
                     | relational_expression LT shift_expression
                     | relational_expression GT shift_expression
                     | relational_expression LT_EQ shift_expression
                     | relational_expression GT_EQ shift_expression
                     ;

equality_expression: relational_expression
                   | equality_expression EQ_EQ relational_expression
                   | equality_expression EXCL_EQ relational_expression
                   ;

AND_expression: equality_expression
              | AND_expression AMP equality_expression
              ;

exclusive_OR_expression: AND_expression
                       | exclusive_OR_expression HAT AND_expression
                       ;

inclusive_OR_expression: exclusive_OR_expression
                       | inclusive_OR_expression VERT exclusive_OR_expression
                       ;

logical_AND_expression: inclusive_OR_expression
                      | logical_AND_expression AMP_AMP inclusive_OR_expression
                      ;

logical_OR_expression: logical_AND_expression
                     | logical_OR_expression VERT_VERT logical_AND_expression
                     ;

conditional_expression: logical_OR_expression
                      | logical_OR_expression QUEST expression COLON conditional_expression
                      ;

assignment_expression: conditional_expression
                     | unary_expression assignment_operator assignment_expression
                     ;

assignment_operator: EQ | AST_EQ | SOL_EQ | PERCNT_EQ | PLUS_EQ | MINUS_EQ | LAQUO_EQ | RAQUO_EQ | AMP_EQ | HAT_EQ | VERT_EQ ;

expression: assignment_expression
          | expression COMMA assignment_expression
          ;

constant_expression: conditional_expression
                   ;

declaration: declaration_specifiers SEMI 
           | declaration_specifiers init_declarator_list SEMI 
           | static_assert_declaration
           ;

declaration_specifiers: storage_class_specifier
                      | storage_class_specifier declaration_specifiers
                      | type_specifier
                      | type_specifier declaration_specifiers
                      | type_qualifier
                      | type_qualifier declaration_specifiers 
                      | function_specifier
                      | function_specifier declaration_specifiers
                      | alignment_specifier
                      | alignment_specifier declaration_specifiers
                      ;

init_declarator_list: init_declarator
                    | init_declarator_list COMMA init_declarator
                    ;

init_declarator: declarator
               | declarator EQ initializer
               ;

storage_class_specifier: TYPEDEF | EXTERN | STATIC | THREAD_LOCAL | AUTO | REGISTER ;

type_specifier: VOID | CHAR | SHORT | INT | LONG | FLOAT | DOUBLE | SIGNED | UNSIGNED | BOOL | COMPLEX
              | atomic_type_specifier
              | struct_or_union_specifier
              | enum_specifier
              /*
              | typedef_name
              */
              | TYPEDEF_NAME
              ;

struct_or_union_specifier: struct_or_union LCUB struct_declaration_list RCUB
                         | struct_or_union IDENTIFIER LCUB struct_declaration_list RCUB
                         | struct_or_union IDENTIFIER
                         ;

struct_or_union: STRUCT | UNION ;

struct_declaration_list: struct_declaration
                       | struct_declaration_list struct_declaration
                       ;

struct_declaration: specifier_qualifier_list SEMI
                  | specifier_qualifier_list struct_declarator_list SEMI
                  | static_assert_declaration
                  ;

specifier_qualifier_list: type_specifier
                        | type_specifier specifier_qualifier_list
                        | type_qualifier
                        | type_qualifier specifier_qualifier_list
                        | alignment_specifier
                        | alignment_specifier specifier_qualifier_list
                        ;

struct_declarator_list: struct_declarator
                      | struct_declarator_list COMMA struct_declarator
                      ;

struct_declarator: declarator
                 | COLON constant_expression
                 | declarator COLON constant_expression
                 ;

enum_specifier: ENUM LCUB enumerator_list RCUB
              | ENUM IDENTIFIER LCUB enumerator_list RCUB
              | ENUM LCUB enumerator_list COMMA RCUB
              | ENUM IDENTIFIER LCUB enumerator_list COMMA RCUB
              | ENUM IDENTIFIER
              ;

enumerator_list: enumerator
               | enumerator_list COMMA enumerator
               ;

enumerator: enumeration_constant
          | enumeration_constant EQ enumeration_constant
          ;

/* NOTE: following two rules make grammar ambiguous.
 * See https://stackoverflow.com/questions/10668941/c11-grammar-ambiguity-between-atomic-type-specifier-and-qualifier
 */

atomic_type_specifier: ATOMIC LPAR type_name RPAR
                     ;

type_qualifier: CONST | RESTRICT | VOLATILE | ATOMIC ;

function_specifier: INLINE | NORETURN ;

alignment_specifier: ALIGNAS LPAR type_name RPAR
                   | ALIGNAS LPAR constant_expression RPAR
                   ;

declarator: direct_declarator
          | pointer direct_declarator
          ;

direct_declarator: IDENTIFIER
                 | LPAR declarator RPAR
                 | direct_declarator LSQB RSQB
                 | direct_declarator LSQB type_qualifier_list RSQB
                 | direct_declarator LSQB assignment_expression RSQB
                 | direct_declarator LSQB type_qualifier_list assignment_expression RSQB
                 | direct_declarator LSQB STATIC assignment_expression RSQB
                 | direct_declarator LSQB STATIC type_qualifier_list assignment_expression RSQB
                 | direct_declarator LSQB type_qualifier_list STATIC assignment_expression RSQB
                 | direct_declarator LSQB AST RSQB
                 | direct_declarator LSQB type_qualifier_list AST RSQB
                 | direct_declarator LPAR parameter_type_list RPAR
                 | direct_declarator LPAR RPAR
                 | direct_declarator LPAR identifier_list RPAR
                 ;

/*
typedef_name: IDENTIFIER
            ;
*/

pointer: AST
       | AST type_qualifier_list
       | AST pointer
       | AST type_qualifier_list pointer
       ;

type_qualifier_list: type_qualifier
                   | type_qualifier_list type_qualifier
                   ;

parameter_type_list: parameter_list
                   | parameter_list COMMA HELLIP
                   ;

parameter_list: parameter_declaration
              | parameter_list COMMA parameter_declaration
              ;

parameter_declaration: declaration_specifiers declarator
                     | declaration_specifiers
                     | declaration_specifiers abstract_declarator
                     ;

identifier_list: IDENTIFIER
               | identifier_list COMMA IDENTIFIER
               ;

type_name: specifier_qualifier_list
         | specifier_qualifier_list abstract_declarator
         ;

abstract_declarator: pointer
                   | direct_abstract_declarator
                   | pointer direct_abstract_declarator
                   ;

direct_abstract_declarator: LPAR abstract_declarator RPAR
                          | LSQB RSQB
                          | direct_abstract_declarator LSQB RSQB
                          | LSQB type_qualifier_list RSQB
                          | direct_abstract_declarator LSQB type_qualifier_list RSQB
                          | LSQB assignment_expression RSQB
                          | direct_abstract_declarator LSQB assignment_expression RSQB
                          | LSQB type_qualifier_list assignment_expression RSQB
                          | direct_abstract_declarator LSQB type_qualifier_list assignment_expression RSQB
                          | LSQB STATIC assignment_expression RSQB
                          | direct_abstract_declarator LSQB STATIC assignment_expression RSQB
                          | LSQB STATIC type_qualifier_list assignment_expression RSQB
                          | direct_abstract_declarator LSQB STATIC type_qualifier_list assignment_expression RSQB
                          | LSQB type_qualifier_list STATIC assignment_expression RSQB
                          | direct_abstract_declarator LSQB type_qualifier_list STATIC assignment_expression RSQB
                          | LSQB AST RSQB
                          | direct_abstract_declarator LSQB AST RSQB
                          | LPAR RPAR
                          | direct_abstract_declarator LPAR RPAR
                          | LPAR parameter_type_list RPAR
                          | direct_abstract_declarator LPAR parameter_type_list RPAR
                          ;

initializer: assignment_expression
           | LCUB initializer_list RCUB
           | LCUB identifier_list COMMA RCUB
           ;

initializer_list: initializer
                | designation initializer
                | initializer_list COMMA initializer
                | initializer_list COMMA designation initializer
                ;

designation: designation_list EQ
           ;

designation_list: designator
                | designation_list designator
                ;

designator: LSQB constant_expression RSQB
          | PERIOD IDENTIFIER
          ;

static_assert_declaration: STATIC_ASSERT LPAR constant_expression COMMA STRING_LITERAL RPAR SEMI
                         ;

statement: labeled_statement
         | compound_statement
         | expression_statement
         | selection_statement
         | iteration_statement
         | jump_statement
         ;


labeled_statement: IDENTIFIER COLON statement
                 | CASE constant_expression COLON statement
                 | DEFAULT COLON statement
                 ;

compound_statement: LCUB RCUB
                  | LCUB block_item_list RCUB
                  ;

block_item_list: block_item
               | block_item_list block_item
               ;

block_item: declaration
          | statement
          ;

expression_statement: SEMI
                    | expression SEMI
                    ;

selection_statement: IF LPAR expression RPAR statement
                   | IF LPAR expression RPAR statement ELSE statement
                   | SWITCH LPAR expression RPAR statement
                   ;

iteration_statement: WHILE LPAR expression RPAR statement
                   | DO statement WHILE LPAR expression RPAR SEMI
                   | FOR LPAR SEMI SEMI RPAR statement
                   | FOR LPAR expression SEMI SEMI RPAR statement
                   | FOR LPAR SEMI expression SEMI RPAR statement
                   | FOR LPAR SEMI SEMI expression RPAR statement
                   | FOR LPAR expression SEMI expression SEMI RPAR statement
                   | FOR LPAR expression SEMI SEMI expression RPAR statement
                   | FOR LPAR SEMI expression SEMI expression RPAR statement
                   | FOR LPAR expression SEMI expression SEMI expression RPAR statement
                   | FOR LPAR declaration SEMI RPAR statement
                   | FOR LPAR declaration expression SEMI RPAR statement
                   | FOR LPAR declaration SEMI expression RPAR statement
                   | FOR LPAR declaration expression SEMI expression RPAR statement
                   ;

jump_statement: GOTO IDENTIFIER SEMI
              | CONTINUE SEMI
              | BREAK SEMI
              | RETURN SEMI
              | RETURN expression SEMI
              ;

translation_unit: external_declaration
                | translation_unit external_declaration
                ;

external_declaration: function_definition
                    | declaration 
                    ;

function_definition: declaration_specifiers declarator compound_statement
                   | declaration_specifiers declarator declaration_list compound_statement
                   ;

declaration_list: declaration
                | declaration_list declaration 
                ;

%%

auto yy::parser::error(parser::location_type const &yylloc,
                       std::string const &msg) -> void {
  std::cerr << yylloc << ": " << msg << std::endl;
}

/* vim: set ft=yacc ts=2 sw=2 et: */
